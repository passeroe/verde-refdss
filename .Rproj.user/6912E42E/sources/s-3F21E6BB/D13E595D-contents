# This script will house the fish processing options and functionality
# This script will produce area-lookup tables by species for fish
# Last edited by Elaina Passero on 2/18/20

# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis",
              "ggplot2","data.table","dplyr","plotly","spex","stars","igraph","deldir","hydroTSM","rlist")
#  Check to see if each is installed, and install if not.
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {    
  install.packages(setdiff(packages, rownames(installed.packages())))  
}
# load the installed libraries in the packages list 
lapply(packages,library,character.only=TRUE)

### Begin Inputs ###

fish_tag <- "test" # distinguish file name of area discharge curves

## Primary Inputs
wd <- "C:/Users/epassero/Desktop/VRDSS/verde-refdss/" # Project working directory
#wd <- "/Users/Morrison/Documents/Active Research Projects/Verde REFDSS/verde-refdss/" # Set path to local repository
setwd(wd)
hab_mets <- list("Depth","Velocity") #Variables from iRIC calculation result used for habitat analysis - case sensitive
#species_list <- c("longfindace","desertsucker") #"sonoransucker") #"yellowbullhead", "sonoransucker","redshiner","roundtailchub","greensunfish","fatheadminnow","speckleddace")
species_list <- c("desertsucker","smallmouthbass") # species list for chris
lifestages <- list("adult") #lifestages from oldest to youngest; must match order in HSC table
reach_name <- "USBeasley1" # Reach of interest
model_run <- "2.12.20" # Should match end of name of folder with results
dis_unit <- "cms" #units of discharge

## Secondary Inputs - Use only if switching between projects
Check0Flow <- "No" # Yes- Calculate max area for 0-flow scenario and interpolate below min modeled Q. No - 0 flow = 0 area.
if(Check0Flow=="Yes"){ 
  depth0Flow <- "d_cfs_0m" # raster name for 0 flow depth
}# end of internal rasterization inputs;

## Options - If set to No, inputs are not required for option
# Yes or No. Choose whether or not to check substrate conditions as part of suitable habitat
CheckSub <- "Yes"

# Yes or No. Choose whether or not to remove isolated (single cell) habitat patches
RemoveIslands <- "Yes"; if(RemoveIslands=="Yes"){
  island_size <- 2} # number of raster cells that is considered too small of a habitat patch

# Yes or No. Choose whether or not to normalize habitat area by reach length
NormalizeByL <- "Yes"; if(NormalizeByL=="Yes"){
  reach_length <- 0.5
  length_unit <- "km"}

# Yes or No. Export Rasters of Habitat by Discharge per lifestage and species
ExportRast <- "Yes"

# Yes or No. Export habitat area-lookup tables
ExportTable <- "Yes" 

### End User Inputs ###

### Begin Processing ###
reach_run <- paste(reach_name,"_",model_run,sep="")
reach_wd <- paste(wd,"reaches","/",reach_run,"/",sep = "")

output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_pre_outputs.rdata",sep="")) # load fish outputs
eval(parse(text=paste("pre_outputs=",output_name)))

out_val_rast <- pre_outputs$out_val_rast
modeled_q <- pre_outputs$modeled_q

if(CheckSub == "Yes"){
  rast_sub_map <- pre_outputs$rast_sub_map
}

##### Run for all species #####
fish_outputs <- list()
fish_outputs <- lapply(species_list, function(species){ # builds tables and maps for all species in list
  
  fish <- species
  
  ## Reclassify Bricks with hydraulic and substrate HSC by lifestage
  source("find.hsc.R"); source("bricks.rc.R"); source("by.substrate.R"); source("find.sub.R"); source("remove.islands.R")
  
  hsc_all_spec <- fread(paste(reach_wd,"habitat_info","/",reach_name,"_hsc",".csv",sep = ""), 
                        header=TRUE, sep=",",data.table = FALSE)
  hsc_all_ages <- find.hsc(hsc_all_spec,species) # extract HSC for single species
  good_hab_list <- lapply(lifestages, function(a) bricks.rc(a,out_val_rast,hsc_all_ages,hab_mets))
  names(good_hab_list) <- lifestages # list of Bricks by lifestage
  
  if(CheckSub == "Yes"){
    sub_all_spec <- fread(paste(reach_wd,"habitat_info","/",reach_name,"_substrate",".csv",sep=""),
                          header=TRUE, sep = ",",data.table = FALSE) # load substrate requirements
    sub_all_ages <- find.sub(sub_all_spec,species) # extract substrate requirements for single species
    good_hab_list <- lapply(lifestages, function(a) by.substrate(a, good_hab_list, sub_all_ages,rast_sub_map,fish))
    names(good_hab_list) <- lifestages
  } # end of if statement
  
  if(RemoveIslands == "Yes"){
    good_hab_list <- lapply(lifestages, function(a) remove.islands(a,good_hab_list,RemoveIslands,island_size))
    names(good_hab_list) <- lifestages
  }
  
   ## Total available habitat area by lifestage
   source("total.area.R")
   area_look_tab <- lapply(lifestages, function(a) total.area(a,good_hab_list,modeled_q,NormalizeByL,
                                                              reach_length,hab_mets,ExportTable,fish,reach_run))
   names(area_look_tab) <- lifestages
   
   ## Order rasters of total available habitat by modeled discharge
   source("order.by.q.R")
   out_by_q <- lapply(lifestages, function(a) order.by.q(a,good_hab_list,modeled_q,ExportRast,reach_wd,fish,reach_run))
   names(out_by_q) <- lifestages
   rast_by_q <- unlist(lapply(lifestages, function(a){out_by_q[[a]][[1]]}))
   sort_q <- unlist(lapply(lifestages, function(a){out_by_q[[a]][[2]]}))
     
   # condense outputs into a single list
   fish_outputs$area_look_tab <- area_look_tab
   fish_outputs$rast_by_q <- rast_by_q
   
   # save outputs for internal use
   list.save(fish_outputs,file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",fish,"_fish_outputs.rdata",sep=""))
   
    
  return(fish_outputs)
}) # end of species list function

names(fish_outputs) <- species_list

# create plots of the habitat area-discharge curves
source("plot.a.q.curve.R"); source("plot.a.q.curve.in.chan.R")
area_look_plots <- lapply(lifestages, function(a) plot.a.q.curve(fish_outputs,species_list,a,NormalizeByL,fish_tag,reach_run))
in_chan_area_look_plots <- lapply(lifestages, function(a) plot.a.q.curve.in.chan(fish_outputs,species_list,a,NormalizeByL,fish_tag,reach_run))


#### For Cherry Creek Proof-of-Concept

# # Put tables in a nice format
# tables <- lapply(species_list, function(species){
#   fish_outputs[[species]]$area_look_tab
# })
# names(tables) <- species_list
# 
# ## Generate plots of area by discharge for all species
# plottable <- data.frame(tables[[1]]$adult$discharge)
# for(i in 1:length(tables)){
#   plottable[,i+1] <- tables[[i]]$adult$normalized_area
#   #plottable[,i+1] <- tables[[i]]$adult$total_area
# }
# colnames(plottable) <- c("discharge",species_list)
# 
# plot_ly(plottable,x=~discharge) %>%
#   add_lines(y=plottable[,2],name=names(plottable[2]),line=list(color='black')) %>%
#   add_lines(y=plottable[,3],name=names(plottable[3]),line=list(color='orange')) %>%
#    # add_lines(y=plottable[,4],name=names(plottable[4]),line=list(color='teal')) %>%
#    # add_lines(y=plottable[,5],name=names(plottable[5]),line=list(color='blue')) %>%
#    # add_lines(y=plottable[,6],name=names(plottable[6]),line=list(color='red')) %>%
#    # add_lines(y=plottable[,7],name=names(plottable[7]),line=list(color='yellow')) %>%
#    # add_lines(y=plottable[,8],name=names(plottable[8]),line=list(color='green')) %>%
#    # add_lines(y=plottable[,9],name=names(plottable[9]),line=list(color='purple')) %>%
#    # add_lines(y=plottable[,10],name=names(plottable[10]),line=list(color='pink')) %>%
#   layout(title="Habitat-discharge for Cherry Creek w/ Substrate",xaxis=list(title="Discharge (cfs)"),
#          yaxis=list(title="Total Normalized Habitat Area m2/km"))





