# This script will house the post-processing options and functionality
# Last edited by Elaina Passero on 02/26/20

# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis",
              "ggplot2","data.table","dplyr","spex","stars","igraph","deldir","hydroTSM",
              "lubridate","rlist")
#  Check to see if each is installed, and install if not.
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {    
  install.packages(setdiff(packages, rownames(installed.packages())))  
}
# load the installed libraries in the packages list 
lapply(packages,library,character.only=TRUE)
###########################################

# User inputs

wd <- "C:/Users/epassero/Desktop/VRDSS/verde-refdss/" # Project working directory
#wd <- "/Users/Morrison/Documents/Active Research Projects/Verde REFDSS/verde-refdss/" # Set path to local repository
setwd(wd)

hab_mets <- list("Depth","Velocity") #Variables from iRIC calculation result used for habitat analysis - case sensitive
#species_list <- c("longfindace","desertsucker") #"sonoransucker") #"yellowbullhead", "sonoransucker","redshiner","roundtailchub","greensunfish","fatheadminnow","speckleddace")
species_list <- c("Desert_Sucker","Sonora_Sucker","Roundtail_Chub","Speckled_Dace",
                  "Smallmouth-Redeye_Bass","Red_Shiner","Common_Carp") # species list 
lifestages <- list("adult") #lifestages from oldest to youngest; must match order in HSC table
veg_list <- c("drgt_tol_shrubs","tall_trees","popufre","prosvel","saligoo") # vegetation group list
#veg_list <- c("drgt_tol_shrubs") # vegetation group list
reach_name <- "USBeasley1" # Should match name of folder with results
model_run <- "2.12.20" # Should match end of name of folder with results
dis_unit <- "cms" #units of discharge

# Yes or No. Indicate whether or not to substrate was a condition of suitable habitat
CheckSub <- "Yes"

# Yes or No. Choose whether or not to normalize habitat area by reach length
NormalizeByL <- "Yes"; if(NormalizeByL=="Yes"){
  reach_length <- 0.5
  length_unit <- "km"}

# Yes or No. Choose whether or not to calculate X-day statistics. Must supply number of days.
CalcXDayStats <- "No"; if(CalcXDayStats=="Yes"){
  x_days <- 7} # number of days for moving area statistics

# Yes or No. Yes - limit analysis to supplied dates. No - consider entire hydrograph.
DateRange <- "No"; if(DateRange=="Yes"){
  start_date <- "1974-01-01" # "YYYY-MM-DD"
  end_date <- "1994-12-31"} # "YYYY-MM-DD"

# Flow scenarios to calculate metrics for 
#scene_names <- c("baseline_q","red_25_percent","red_all_q_10")
scene_names <- c("baseline_q","scenario_A","scenario_B")

### End of User Inputs ###

### Begin post-processing ###
reach_run <- paste(reach_name,"_",model_run,sep="")
reach_wd <- paste(wd,"reaches","/",reach_run,"/",sep = "")

# create list of flow scenario data frames
scene_list <- lapply(scene_names, function(s){
  q_ts <- na.omit(fread(file=paste(reach_wd,"flow_scenarios","/",reach_name,"_",s,".csv",sep=""),
                        header=TRUE, sep = ",",data.table=FALSE)) %>%
    mutate(date_form = as.Date(date)) %>%
    select(-date) %>%
    rename(date = date_form)
  if(DateRange=="Yes"){
    q_ts <- subset(q_ts, date > as.Date(start_date)) 
    q_ts <- subset(q_ts, date < as.Date(end_date))
  }
  return(q_ts)
})
names(scene_list) <- scene_names

# Load pre.processing outputs
output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_pre_outputs.rdata",sep="")) # load rasterized 2D modeling results
eval(parse(text=paste("pre_outputs=",output_name)))

out_val_rast <- pre_outputs$out_val_rast
modeled_q <- pre_outputs$modeled_q


# Fish post-processing
all_fish_post_out <- list()
all_fish_post_out <- lapply(scene_names, function(scene_name){
  
  s <- scene_list[[scene_name]]
  
  post_fish_outputs <- list()
  post_fish_outputs <- lapply(species_list, function(species){ 

    output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",species,"_fish_outputs.rdata",sep="")) # load fish outputs
    eval(parse(text=paste("one_spec=",output_name)))
    
     for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
       tempobj = one_spec[[i]]
       eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
     }
    
    # Flow-Scenario related scripts
    source("interp.table.R")
    inter_tab <- lapply(lifestages, function(a) interp.table(a,s,area_look_tab,NormalizeByL))
    names(inter_tab) <- lifestages
    post_fish_outputs$inter_tab <- inter_tab
    
    # Generate and view plots of total area through the hydrograph
    source("interp.plot.R")
    inter_plots <- interp.plot(inter_tab,NormalizeByL,species,scene_name,reach_run)
    names(inter_plots) <- species
    post_fish_outputs$inter_plots <- inter_plots
    
    ## Generate Data Frames of moving X-Day area and discharge statistics
    if(CalcXDayStats=="Yes"){
      source("x.day.stats.R")
      x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
      names(x_day_stats) <- lifestages
      post_fish_outputs$x_day_stats <- x_day_stats
    }
    
    source("avg.month.area.R")
    avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
    names(avg_monthly_area) <- lifestages
    post_fish_outputs$avg_monthly_area <- avg_monthly_area
    # end of flow scenario dependent processes
    
    # save outputs (dss_outputs) for use in scenario.comparison.R
    list.save(post_fish_outputs,file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",species,".rdata",sep=""))
    
    return(post_fish_outputs)
  }) # end of single species function
  
  names(post_fish_outputs) <- species_list
  
  return(post_fish_outputs)
}) # end of flow scenario list function
names(all_fish_post_out) <- names(scene_list)


# Producing Figures for Chris + Dave

# source("calc.hab.retention.R")
# hab_retention <- lapply(scene_fish_out, habitat.retention())

# source("interp.plot.abbr.R")
# scenario <- "baseline"
# 
# # annual
# inter_plots_ann <- lapply(species_list, function(species) {
#   inter_tab <- scene_fish_out[[scenario]][[species]]$inter_tab
#   write.csv(inter_tab,file = paste(scenario,"_",species,"_tab.csv",sep=""))
#   interp.plot.abbr(inter_tab,NormalizeByL,as.Date("1990-01-01"),as.Date("1990-12-31"),scenario,species)
#   ggsave(paste(scenario,"_",species,"_","annual.png",sep=""),width=7, height=5,units = "in")
#   })
# names(inter_plots_ann) <- species_list
# inter_plots_ann
# 
# # monthly
# inter_plots_mon <- lapply(species_list, function(species) {
#   inter_tab <- scene_fish_out[[scenario]][[species]]$inter_tab
#   interp.plot.abbr(inter_tab,NormalizeByL,as.Date("1990-07-01"),as.Date("1990-08-31"),scenario,species)
#   ggsave(paste(scenario,"_",species,"_","monthly.png",sep=""),width=7, height=5,units = "in")
# })
# names(inter_plots_mon) <- species_list
# inter_plots_mon


# Riparian vegetation post-processing
all_veg_post_out <- list()
all_veg_post_out <- lapply(scene_names, function(scene_name){
  
  s <- scene_list[[scene_name]]
  
  source("q.ep.weibull.R")
  hydro_ep <- q.ep.weibull(s,modeled_q,scene_name)
  all_veg_post_out$hydro_ep <- hydro_ep
  
   source("make.inun.q.map.R")
   wet_map <- make.inun.q.map(hydro_ep,out_val_rast,modeled_q,scene_name,reach_run)
   all_veg_post_out$wet_map <- wet_map
  
  source("make.ep.maps.R")
  ep_map <- make.ep.maps(hydro_ep,out_val_rast,modeled_q,scene_name)
  all_veg_post_out$ep_map <- ep_map
  
  # make maps of probability of occurrence of vegetation
  all_veg_logit <- fread(paste(reach_wd,"habitat_info","/",reach_name,"_veg_pref",".csv",sep=""),
                        header=TRUE, sep = ",",data.table = FALSE) # load logistic equations
  
  source("find.veg.logit.R"); source("find.prob.occur.R"); source("make.veg.maps.R")
  prob_veg_maps <- lapply(veg_list, function(v) {
    one_veg_logit <- find.veg.logit(all_veg_logit,v)
    hydro_ep_prob <- find.prob.occur(v,hydro_ep,one_veg_logit) # outputs table of discharge, EP of discharge, and Prob of Veg for discharge
    prob_veg_map <- make.veg.maps(v,ep_map,hydro_ep_prob,scene_name)
    
    save(prob_veg_map, file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",v,".RData",sep=""))
    
    return(prob_veg_map)
  })
  names(prob_veg_maps) <- veg_list
  all_veg_post_out$prob_veg_maps <- prob_veg_maps
  
  return(all_veg_post_out)
}) # end of flow scenario list function
names(all_veg_post_out) <- names(scene_list)
