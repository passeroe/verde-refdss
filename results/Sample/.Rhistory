if(CheckSub == "1"){sub_allages<-fread(paste(wd,species,"_substrate",".csv",sep=""),header=TRUE, sep = ",",data.table = FALSE)} # load substrate requirements
goodHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
goodHabList[[b]] <- bricks.rc(iricValRast,hsc,habMets)
if(CheckSub == "1"){
subTab <- sub_allages[,b] # creates table of substrate for current lifestage
hhList <- goodHabList[[b]] # holds rasters of area for current lifestage
goodHabList[[b]] <- by.substrate(hhList,subTab)
} # end of if statement
} # end of for loop
names(goodHabList) <- lifestages # list of Bricks by lifestage
## Total available habitat area by lifestage
goodPolyList <- lapply(goodHabList, function(c) brick.2.spdf(c))
rm(goodHabList)
## Effective habitat area
if (CalcEffArea == 1){
### Calculate effective habitat area
effAreaList <- lapply(lifestages,function(e) effective.area(e,goodPolyList))
names(effAreaList) <- lifestages
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(j) build.tables.eff(j,goodPolyList,effAreaList,modeled_q)) # data frame of total available and effective area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(m) save.polys.eff(m, goodPolyList, effAreaList, modeled_q))# data frame of spatial polygons
names(polyTab) <- lifestages
} else{ ## Total available habitat area
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(p) build.tables.tot(p,goodPolyList,totAreaList,modeled_q)) # data frame of total available area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(r) save.polys.tot(r, goodPolyList, effAreaList, modeled_q)) # data frame of spatial polygons
names(polyTab) <- lifestages
}
## Read in hydrograph
hydrograph <- na.omit(fread(paste(wd,reachName,"_hydrograph",".csv",sep=""),header=TRUE, sep = ",",data.table=FALSE))
hydrograph$date <- as.Date(hydrograph$date, format="%m/%d/%Y")
## Generate Interpolated Discharge-Area Lookup Tables from Hydrograph and Regression
interTab <- lapply(lifestages, function(t) interp.table(t,hydrograph,areaLookTab))
names(interTab) <- lifestages
## Generate and view plots of total area through the hydrograph
interPlots <- lapply(lifestages, function(t) interp.plot(t,interTab))
head(interPlots)
# Set Inputs
wd <- "C:/Users/epassero/Desktop/VRDSS/verde-refdss/"
#wd <- "/Users/Morrison/Documents/Active Research Projects/Verde REFDSS/verde-refdss/" # Set path to local repository
setwd(wd)
habMets <- list("Depth","Velocity..magnitude.") #Variables from iRIC calculation result used for habitat analysis
species <- "fakefish"
lifestages <- list("adult") #lifestages from oldest to youngest; must match order in HSC table
reachName <- "Sample" # 1Beasley or Sample
DEM <- "smrf_DEM_v241.tif" # Name of DEM used in iRIC: VerdeBeasley1Elev.tif or smrf_DEM_v241.tif
disunit <- "cms" #units of discharge
# Options: Currently this is only set up to run with the Sample reach
CheckSub <- 0 # 1 (Yes) or 0 (No). Choose whether or not to check substrate conditions as part of suitable habitat
CalcEffArea <- 0 # 1 (Yes) or 0 (No). Choose whether or not to calculate effective habitat area
# Load functions
source("get.results.R")
source("iric.process.smr.R")
source("bricks.rc.R")
source("by.substrate.R")
source("brick.2.spdf.R")
source("effective.area.R")
source("build.tables.eff.R")
source("save.polys.eff.R")
source("build.tables.tot.R")
source("save.polys.tot.R")
source("inspect.hydro.R")
source("interp.table.R")
source("interp.plot.R")
# Run functions
## Format result CSVs and get list of discharges
holdList <- get.results(wd,reachName,disunit)
csvList <- holdList$csvList
modeled_q <- holdList$modeled_q
rm(holdList)
## Convert iRIC outputs to rasterBricks by variable
iricValRast <- list()
iricValRast <- lapply(habMets, function(a) iric.process.smr(a,csvList,wd,DEM,reachName))
names(iricValRast) <-habMets
rm(csvList)
## Reclassify Bricks with hydraulic and substrate HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
if(CheckSub == "1"){sub_allages<-fread(paste(wd,species,"_substrate",".csv",sep=""),header=TRUE, sep = ",",data.table = FALSE)} # load substrate requirements
goodHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
goodHabList[[b]] <- bricks.rc(iricValRast,hsc,habMets)
if(CheckSub == "1"){
subTab <- sub_allages[,b] # creates table of substrate for current lifestage
hhList <- goodHabList[[b]] # holds rasters of area for current lifestage
goodHabList[[b]] <- by.substrate(hhList,subTab)
} # end of if statement
} # end of for loop
names(goodHabList) <- lifestages # list of Bricks by lifestage
## Total available habitat area by lifestage
goodPolyList <- lapply(goodHabList, function(c) brick.2.spdf(c))
rm(goodHabList)
## Effective habitat area
if (CalcEffArea == 1){
### Calculate effective habitat area
effAreaList <- lapply(lifestages,function(e) effective.area(e,goodPolyList))
names(effAreaList) <- lifestages
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(j) build.tables.eff(j,goodPolyList,effAreaList,modeled_q)) # data frame of total available and effective area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(m) save.polys.eff(m, goodPolyList, effAreaList, modeled_q))# data frame of spatial polygons
names(polyTab) <- lifestages
} else{ ## Total available habitat area
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(p) build.tables.tot(p,goodPolyList,totAreaList,modeled_q)) # data frame of total available area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(r) save.polys.tot(r, goodPolyList, effAreaList, modeled_q)) # data frame of spatial polygons
names(polyTab) <- lifestages
}
## Read in hydrograph
hydrograph <- na.omit(fread(paste(wd,reachName,"_hydrograph",".csv",sep=""),header=TRUE, sep = ",",data.table=FALSE))
hydrograph$date <- as.Date(hydrograph$date, format="%m/%d/%Y")
## Generate Interpolated Discharge-Area Lookup Tables from Hydrograph and Regression
interTab <- lapply(lifestages, function(t) interp.table(t,hydrograph,areaLookTab))
names(interTab) <- lifestages
## Generate and view plots of total area through the hydrograph
interPlots <- lapply(lifestages, function(t) interp.plot(t,interTab))
head(interPlots)
head(polyTab)
spplot(polyTab[[1]])
spplot(polyTab[[1]]$totalArea)
spplot(polyTab[[1]]$totalArea[[1]])
View(goodPolyList)
## Effective habitat area
if (CalcEffArea == 1){
### Calculate effective habitat area
effAreaList <- lapply(lifestages,function(e) effective.area(e,goodPolyList))
names(effAreaList) <- lifestages
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(j) build.tables.eff(j,goodPolyList,effAreaList,modeled_q)) # data frame of total available and effective area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(m) save.polys.eff(m, goodPolyList, effAreaList, modeled_q))# data frame of spatial polygons
names(polyTab) <- lifestages
} else{ ## Total available habitat area
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(p) build.tables.tot(p,goodPolyList,totAreaList,modeled_q)) # data frame of total available area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(r) save.polys.tot(r, goodPolyList, effAreaList, modeled_q)) # data frame of spatial polygons
names(polyTab) <- lifestages
}
m<-1
polyTab <- data.frame(row.names=modeled_q) # data frame to hold the Spatial Polygons
totList <- goodPolyList[[m]]
effList <- effAreaList[[m]]
polyTab$totalArea <- lapply(totList, function(n) {
if(length(n)>0){gUnaryUnion(n)} else{NULL}})
polyTab$effArea <- lapply(effList, function(o) {
if(length(o)>0){gUnaryUnion(o)} else{NULL}})
## Effective habitat area
if (CalcEffArea == 1){
### Calculate effective habitat area
effAreaList <- lapply(lifestages,function(e) effective.area(e,goodPolyList))
names(effAreaList) <- lifestages
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(j) build.tables.eff(j,goodPolyList,effAreaList,modeled_q)) # data frame of total available and effective area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(m) save.polys.eff(m, goodPolyList, effAreaList, modeled_q))# data frame of spatial polygons
names(polyTab) <- lifestages
} else{ ## Total available habitat area
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(p) build.tables.tot(p,goodPolyList,totAreaList,modeled_q)) # data frame of total available area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(r) save.polys.tot(r, goodPolyList, effAreaList, modeled_q)) # data frame of spatial polygons
names(polyTab) <- lifestages
}
polyTab$totalArea
polyTab$adult
polyTab$adult$totalArea
head(polyTab$adult$totalArea)
plot(polyTab$adult[1,1][[1]])
polyTab <- data.frame(row.names=modeled_q) # data frame to hold the Spatial Polygons
totList <- goodPolyList[[m]]
effList <- effAreaList[[m]]
polyTab$totalArea <- lapply(totList, function(n) {
if(length(n)>0){gUnaryUnion(n)} else{NULL}})
polyTab$effArea <- lapply(effList, function(o) {
if(length(o)>0){gUnaryUnion(o)} else{NULL}})
plot(polyTab$adult[1,1][[1]])
## Effective habitat area
if (CalcEffArea == 1){
### Calculate effective habitat area
effAreaList <- lapply(lifestages,function(e) effective.area(e,goodPolyList))
names(effAreaList) <- lifestages
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(j) build.tables.eff(j,goodPolyList,effAreaList,modeled_q)) # data frame of total available and effective area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(m) save.polys.eff(m, goodPolyList, effAreaList, modeled_q))# data frame of spatial polygons
names(polyTab) <- lifestages
} else{ ## Total available habitat area
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(p) build.tables.tot(p,goodPolyList,totAreaList,modeled_q)) # data frame of total available area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(r) save.polys.tot(r, goodPolyList, effAreaList, modeled_q)) # data frame of spatial polygons
names(polyTab) <- lifestages
}
polyTab$adult
polyTab$adult$totalArea
plot(polyTab$adult$totalArea)
plot(polyTab$adult$totalArea[[1]])
spplot(polyTab$adult$totalArea)
spplot(polyTab$adult$totalArea[[1]])
polyTab <- data.frame(modeled_q) # data frame to hold the Spatial Polygons
colnames(polyTab) <- "discharge"
totList <- goodPolyList[[m]]
effList <- effAreaList[[m]]
polyTab$totalArea <- lapply(totList, function(n) {
if(length(n)>0){gUnaryUnion(n)} else{NULL}})
polyTab$effArea <- lapply(effList, function(o) {
if(length(o)>0){gUnaryUnion(o)} else{NULL}})
## Effective habitat area
if (CalcEffArea == 1){
### Calculate effective habitat area
effAreaList <- lapply(lifestages,function(e) effective.area(e,goodPolyList))
names(effAreaList) <- lifestages
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(j) build.tables.eff(j,goodPolyList,effAreaList,modeled_q)) # data frame of total available and effective area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(m) save.polys.eff(m, goodPolyList, effAreaList, modeled_q))# data frame of spatial polygons
names(polyTab) <- lifestages
} else{ ## Total available habitat area
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(p) build.tables.tot(p,goodPolyList,totAreaList,modeled_q)) # data frame of total available area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(r) save.polys.tot(r, goodPolyList, effAreaList, modeled_q)) # data frame of spatial polygons
names(polyTab) <- lifestages
}
plot(polyTab$adult[1,1][[1]])
areaLookTab <- data.frame(modeled_q) # data frame to hold total available and effective area
colnames(areaLookTab) <- "discharge"
totList <- goodPolyList[[j]]
effList <- effAreaList[[j]]
areaLookTab$totalArea <- unlist(lapply(totList, function(k) {
if(length(k)>0){gArea(k)} else{0}}))
areaLookTab$effArea <- unlist(lapply(effList, function(l) {
if(length(l)>0){gArea(l)} else{0}}))
polyTab <- data.frame(modeled_q) # data frame to hold the Spatial Polygons
colnames(polyTab) <- "discharge"
totList <- goodPolyList[[m]]
effList <- effAreaList[[m]]
polyTab$totalArea <- lapply(totList, function(n) {
if(length(n)>0){gUnaryUnion(n)} else{NULL}})
polyTab$effArea <- lapply(effList, function(o) {
if(length(o)>0){gUnaryUnion(o)} else{NULL}})
rm(inter.plots)
polyTab <- data.frame(modeled_q) # data frame to hold the Spatial Polygons
colnames(polyTab) <- "discharge"
totList <- goodPolyList[[m]]
effList <- effAreaList[[m]]
polyTab$totalArea <- lapply(totList, function(n) {
if(length(n)>0){gUnaryUnion(n)} else{NULL}})
polyTab$effArea <- lapply(effList, function(o) {
if(length(o)>0){gUnaryUnion(o)} else{NULL}})
polyTab$effArea
# Function: This script serves as the master script that controls which functions are run and what inputs are used for finding suitable fish habitat
#         It will later be converted to the script that controls the Shiny App.
# Last edited by Elaina Passero on 04/08/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis","ggplot2","data.table","dplyr","plotly")
#  Check to see if each is installed, and install if not.
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
# load the installed libraries in the packages list
lapply(packages,library,character.only=TRUE)
# Set Inputs
wd <- "C:/Users/epassero/Desktop/VRDSS/verde-refdss/"
#wd <- "/Users/Morrison/Documents/Active Research Projects/Verde REFDSS/verde-refdss/" # Set path to local repository
setwd(wd)
habMets <- list("Depth","Velocity..magnitude.") #Variables from iRIC calculation result used for habitat analysis
species <- "fakefish"
lifestages <- list("adult") #lifestages from oldest to youngest; must match order in HSC table
reachName <- "Sample" # 1Beasley or Sample
DEM <- "smrf_DEM_v241.tif" # Name of DEM used in iRIC: VerdeBeasley1Elev.tif or smrf_DEM_v241.tif
disunit <- "cms" #units of discharge
# Options: Currently this is only set up to run with the Sample reach
CheckSub <- 0 # 1 (Yes) or 0 (No). Choose whether or not to check substrate conditions as part of suitable habitat
CalcEffArea <- 1 # 1 (Yes) or 0 (No). Choose whether or not to calculate effective habitat area
# Load functions
source("get.results.R")
source("iric.process.smr.R")
source("bricks.rc.R")
source("by.substrate.R")
source("brick.2.spdf.R")
source("effective.area.R")
source("build.tables.eff.R")
source("save.polys.eff.R")
source("build.tables.tot.R")
source("save.polys.tot.R")
source("interp.table.R")
source("interp.plot.R")
# Run functions
## Format result CSVs and get list of discharges
holdList <- get.results(wd,reachName,disunit)
csvList <- holdList$csvList
modeled_q <- holdList$modeled_q
rm(holdList)
## Convert iRIC outputs to rasterBricks by variable
iricValRast <- list()
iricValRast <- lapply(habMets, function(a) iric.process.smr(a,csvList,wd,DEM,reachName))
names(iricValRast) <-habMets
rm(csvList)
## Reclassify Bricks with hydraulic and substrate HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
if(CheckSub == "1"){sub_allages<-fread(paste(wd,species,"_substrate",".csv",sep=""),header=TRUE, sep = ",",data.table = FALSE)} # load substrate requirements
goodHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
goodHabList[[b]] <- bricks.rc(iricValRast,hsc,habMets)
if(CheckSub == "1"){
subTab <- sub_allages[,b] # creates table of substrate for current lifestage
hhList <- goodHabList[[b]] # holds rasters of area for current lifestage
goodHabList[[b]] <- by.substrate(hhList,subTab)
} # end of if statement
} # end of for loop
names(goodHabList) <- lifestages # list of Bricks by lifestage
## Total available habitat area by lifestage
goodPolyList <- lapply(goodHabList, function(c) brick.2.spdf(c))
rm(goodHabList)
## Effective habitat area
if (CalcEffArea == 1){
### Calculate effective habitat area
effAreaList <- lapply(lifestages,function(e) effective.area(e,goodPolyList))
names(effAreaList) <- lifestages
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(j) build.tables.eff(j,goodPolyList,effAreaList,modeled_q)) # data frame of total available and effective area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(m) save.polys.eff(m, goodPolyList, effAreaList, modeled_q))# data frame of spatial polygons
names(polyTab) <- lifestages
} else{ ## Total available habitat area
### Construct Area-Lookup Tables
areaLookTab <- lapply(lifestages, function(p) build.tables.tot(p,goodPolyList,totAreaList,modeled_q)) # data frame of total available area
names(areaLookTab) <- lifestages
polyTab <- lapply(lifestages, function(r) save.polys.tot(r, goodPolyList, effAreaList, modeled_q)) # data frame of spatial polygons
names(polyTab) <- lifestages
}
## Read in hydrograph
hydrograph <- na.omit(fread(paste(wd,reachName,"_hydrograph",".csv",sep=""),header=TRUE, sep = ",",data.table=FALSE))
hydrograph$date <- as.Date(hydrograph$date, format="%m/%d/%Y")
## Generate Interpolated Discharge-Area Lookup Tables from Hydrograph and Regression
interTab <- lapply(lifestages, function(t) interp.table(t,hydrograph,areaLookTab))
names(interTab) <- lifestages
## Generate and view plots of total area through the hydrograph
interPlots <- lapply(lifestages, function(t) interp.plot(t,interTab))
head(interPlots)
plot(polyTab$adult[1,1][[1]])
plot(polyTab$totalArea[1,1][[1]])
plot(polyTab$totalArea[[1]]
)
polyTab$adult$totalArea
spplot(polyTab$adult$totalArea)
spplot(polyTab$adult$totalArea[[1]])
a <- 2
spplot(polyTab$adult$totalArea[[a]],colorkey=FALSE,main="Total Available Habitat Area: adult",sub=a)
a <- 3
spplot(polyTab$adult$totalArea[[a]],colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms")
spplot(polyTab$adult$totalArea[[a]],colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",list(draw=TRUE))
polyTab$adult$totalArea@polygons
polyTab$adult$totalArea[[1]]@bbox
polyTab$adult$totalArea[[1]]@bbox*1.25
a <- 3
b <- polyTab$adult$totalArea[[a]]
extents <- b@bbox*1.25
xmax <- extents[1,2]
a <- 3
b <- polyTab$adult$totalArea[[a]]
extents <- b@bbox*1.25
xmax <- extents[1,2]
ymax <- extents[2,2]
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",list(draw=TRUE),xlim=xmax,ylim=ymax)
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=xmax,ylim=ymax)
spplot(b,xlim=xmax,ylim=ymax,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms")
x <- extents[1,2]
y <- extents[2,2]
spplot(b,xlim=x,ylim=y,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms")
spplot(b)
x <- extents[1,]
y <- extents[2,]
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=x,ylim=y)
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=extents[1,],ylim=extents[2,])
extents <- b@bbox*1
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=extents[1,],ylim=extents[2,])
extents <- b@bbox*1.1
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=extents[1,],ylim=extents[2,])
extents <- b@bbox
xmi <- extents[1,1]*.9
xma <- extents[1,2]*1.1
ymi <- extents[2,1]*.9
yma <- extents[2,2]*1.1
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
xmi <- extents[1,1]*.99
xma <- extents[1,2]*1.01
ymi <- extents[2,1]*.99
yma <- extents[2,2]*1.01
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
xmi <- extents[1,1]#*.99
xma <- extents[1,2]*1.01
ymi <- extents[2,1]#*.99
yma <- extents[2,2]*1.01
(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
xmi <- extents[1,1]*.9999
xma <- extents[1,2]*1.0001
ymi <- extents[2,1]*.9999
yma <- extents[2,2]*1.0001
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
xmi <- extents[1,1]*.99999
xma <- extents[1,2]*1.00001
ymi <- extents[2,1]*.99999
yma <- extents[2,2]*1.00001
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="Q = 1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
xmi <- extents[1,1]*1
xma <- extents[1,2]*1.00001
ymi <- extents[2,1]*.99999
yma <- extents[2,2]*1.00001
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="Q = 1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
xmi <- extents[1,1]*.99999
xma <- extents[1,2]*1.00001
ymi <- extents[2,1]*.99999
yma <- extents[2,2]*1.00001
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="Q = 1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
xmi <- extents[1,1]*.99999
xma <- extents[1,2]*1.00001
ymi <- extents[2,1]*.999999
yma <- extents[2,2]*1.000001
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="Q = 1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
install.packages("dismo")
install.packages("ggmap")
library("ggmap", lib.loc="C:/Program Files/R/R-3.5.3/library")
a <- 3
b <- polyTab$adult$totalArea[[a]]
extents <- b@bbox
xmi <- extents[1,1]*.99999
xma <- extents[1,2]*1.00001
ymi <- extents[2,1]*.99999
yma <- extents[2,2]*1.00001
# REPROJECT YOUR DATA TO EPSG 3857
to.plot.web.merc <- spTransform(b, CRS("+init=EPSG:3857"))
# COPY AND PASTE SEGEMENT 1 Series of weird conversions to deal with
# inconsistencies in units for API.
box <- to.plot.web.merc@bbox
midpoint <- c(mean(box[1, ]), mean(box[2, ]))
left.bottom <- c(box[1, 1], box[2, 1])
top.right <- c(box[1, 2], box[2, 2])
boundaries <- SpatialPoints(rbind(left.bottom, top.right))
proj4string(boundaries) <- CRS("+init=EPSG:3857")
boundaries.latlong <- c(t(spTransform(boundaries, CRS("+init=EPSG:4326"))@coords))
# END COPY-PASTE SEGMENT 1
# SET MAP TYPE HERE, LEAVE OTHER PARAMETERS AS THEY ARE
gmap <- get_map(boundaries.latlong, maptype = "terrain", source = "stamen",
crop = TRUE)
# COPY-PASTE SEGMENT 2 Create object that sp.layout likes.
long.center <- midpoint[1]
lat.center <- midpoint[2]
height <- box[2, 2] - box[2, 1]
width <- box[1, 2] - box[1, 1]
sp.raster <- list("grid.raster", gmap, x = long.center, y = lat.center, width = width,
height = height, default.units = "native", first = TRUE)
### Individual Plotting
spplot(to.plot.web.merc,colorkey=FALSE,sp.layout=sp.raster,main="Total Available Habitat Area: adult",sub="Q = 1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
layout.north.arrow(type=1)
library("dismo", lib.loc="C:/Program Files/R/R-3.5.3/library")
# REPROJECT YOUR DATA TO EPSG 3857
to.plot.web.merc <- spTransform(b, CRS("+init=EPSG:3857"))
# COPY AND PASTE SEGEMENT 1 Series of weird conversions to deal with
# inconsistencies in units for API.
box <- to.plot.web.merc@bbox
midpoint <- c(mean(box[1, ]), mean(box[2, ]))
left.bottom <- c(box[1, 1], box[2, 1])
top.right <- c(box[1, 2], box[2, 2])
boundaries <- SpatialPoints(rbind(left.bottom, top.right))
proj4string(boundaries) <- CRS("+init=EPSG:3857")
boundaries.latlong <- c(t(spTransform(boundaries, CRS("+init=EPSG:4326"))@coords))
# END COPY-PASTE SEGMENT 1
# SET MAP TYPE HERE, LEAVE OTHER PARAMETERS AS THEY ARE
gmap <- get_map(boundaries.latlong, maptype = "terrain", source = "stamen",
crop = TRUE)
# COPY-PASTE SEGMENT 2 Create object that sp.layout likes.
long.center <- midpoint[1]
lat.center <- midpoint[2]
height <- box[2, 2] - box[2, 1]
width <- box[1, 2] - box[1, 1]
sp.raster <- list("grid.raster", gmap, x = long.center, y = lat.center, width = width,
height = height, default.units = "native", first = TRUE)
### Individual Plotting
spplot(to.plot.web.merc,colorkey=FALSE,sp.layout=sp.raster,main="Total Available Habitat Area: adult",sub="Q = 1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
layout.north.arrow(type=1)
library("raster", lib.loc="C:/Program Files/R/R-3.5.3/library")
base.map <- gmap(b, type = "terrain")
reprojected.b <- spTransform(b, base.map@crs)
plot(base.map)
plot(reprojected.b,add=T,col="black")
# Pass object whose extent you plan to plot as first argument and map-type
# as second.
base.map <- gmap(b, type = "roadmap")
reprojected.b <- spTransform(b, base.map@crs)
plot(base.map)
plot(reprojected.b,add=T,col="black")
a <- 3
b <- polyTab$adult$totalArea[[a]]
extents <- b@bbox
xmi <- extents[1,1]*.99999
xma <- extents[1,2]*1.00001
ymi <- extents[2,1]*.99999
yma <- extents[2,2]*1.00001
### Individual Plotting
spplot(b,colorkey=FALSE,main="Total Available Habitat Area: adult",sub="Q = 1.6 cms",xlim=c(xmi,xma),ylim=c(ymi,yma))
layout.north.arrow(type=1)
