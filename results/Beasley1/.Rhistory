wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Set inputs
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species = "fakefish"
lifestages = list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in lifestages){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages
hydHabList$adult
plot(hydHabList)
plot(hydHabList[[1]])
plot(hydHabList[[1]],title(main="Adult"))
plot(hydHabList[[2]],title(main="Juvenile"))
plot(hydHabList[[1]],title(main="Adult"))
plot(hydHabList[[1]])
plot(hydHabList[[2]])
plot(SMR_elev)
# Set this to the IRIC_Processing_in_R_v1 folder to run this code
setwd(paste(wd,"results\\",sep = "")) # DEM and iRIC calculation results must be in their own folder
# read in elevation surface from the working directory
SMR_elev <- raster("smrf_DEM_v241.tif")
plot(SMR_elev)
plot(hydHabList[[1,1]]) # adult
plot(hydHabList[[1]]) # adult
plot(SMR_elev, add = TRUE)
adult <- hydHabList[[1]]
plot(SMR_elev, add = TRUE)
adult <- hydHabList[[1]]
plot(adult$Result_0000.67.csv)
plot(SMR_elev)
adult <- hydHabList[[1]]
plot(adult$Result_0000.67.csv,add=TRUE)
plot(adult$Result_0000.67.csv, col=black)
plot(SMR_elev, add=TRUE)
plot(adult$Result_0000.67.csv, col="black")
plot(SMR_elev, add=TRUE)
plot(SMR_elev)
adult <- hydHabList[[1]]
plot(adult$Result_0000.67.csv, col="black",add=TRUE)
crs(SMR_elev)
# Function: This script serves as the master script that controls which functions are run and what inputs are used for finding suitable fish habitat
#         It will later be converted to the script that controls the Shiny App.
# Last edited by Elaina Passero on 02/13/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis","ggplot2","data.table")
require(packages)
lapply(packages,require,character.only=TRUE)
# Set file locations
#wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
wd <- "C:\\VerdeRiver_2Dmodeling_fromChris\\1Beasley_US\\" # Set path to Chris's results
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Set inputs
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species = "fakefish"
lifestages = list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages # list of Bricks by lifestage
# Function: This script serves as the master script that controls which functions are run and what inputs are used for finding suitable fish habitat
#         It will later be converted to the script that controls the Shiny App.
# Last edited by Elaina Passero on 02/13/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis","ggplot2","data.table")
require(packages)
lapply(packages,require,character.only=TRUE)
# Set file locations
#wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
wd <- "C:\\VerdeRiver_2Dmodeling_fromChris\\1Beasley_US\\" # Set path to Chris's results
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Set inputs
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species = "fakefish"
lifestages = list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages # list of Bricks by lifestage
# Set this to the IRIC_Processing_in_R_v1 folder to run this code
setwd(paste(wd,"results\\",sep = "")) # DEM and iRIC calculation results must be in their own folder
# read in elevation surface from the working directory
SMR_elev <- raster("VerdeBeasley1Elev.tif")
plot(SMR_elev)
# create an empty raster with the extent, resolution, and projection of the DEM.
e <- extent(SMR_elev)
res <- res(SMR_elev)
r <- raster(x = e,resolution = res,crs = "+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") # changed zone from 10 to 12
# read in one of the result files to view head and QAQC
read.csv(iric_results[1],skip = 2,header = T) %>%
head()
iric_results <- list.files(pattern = ".csv") # working directory cannot contain any csv's besides results
# read in one of the result files to view head and QAQC
read.csv(iric_results[1],skip = 2,header = T) %>%
head()
# Variables that will define the values of the processed iric result grid
val = inMet
# Create empty list to contain rasters
SMR_Q_l <- list()
# Create empty vector to contain modeled Qs
modeled_q <- c()
# For every iric output file (csv) in iric_results,
for (i in iric_results) {
# get iric output i
df_i <-  read.csv(i,skip = 2,header = T)
df_i <- setnames(df_i,c(15,21),c("VelocityMag","ShearSMag")) # remove spaces from habitat variable names
# set the discharge of iric output i as q_i [character]
q_i <- sub("Result_","",sub(".csv","",i))
# Transfer values from iric output i to the cells of raster r, but only when the cell is inundated (!= 0)
# If multiple points from the iric output are within a cell of r, the mean points is used for the cell value.
r_i <- rasterize(x = df_i[,c("X","Y")],y = r, field = ifelse(df_i[,"Depth"] == 0,NA,df_i[,val]),fun = mean)
# set projection of raster i
proj4string(r_i) <- CRS("+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") # changed zone from 10 to 12
# Resample raster i using bilinear interpolation to fill in those cells in r_i that did not have a cell value due to no point overlap
r_rsmpl_i <- raster::projectRaster(from=r_i,to=SMR_elev,method = 'bilinear')
# update the name of the resampled raster to include the units of the discharge measure
names(r_rsmpl_i) <- paste0("cms",q_i)
# add resampled raster to the list
SMR_Q_l[[i]] <- r_rsmpl_i
# Create vector modeled qs
modeled_q <- c(modeled_q,as.numeric(q_i))
}
View(df_i)
View(df_i)
# Function: This script serves as the master script that controls which functions are run and what inputs are used for finding suitable fish habitat
#         It will later be converted to the script that controls the Shiny App.
# Last edited by Elaina Passero on 02/13/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis","ggplot2","data.table")
require(packages)
lapply(packages,require,character.only=TRUE)
# Set file locations
#wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
wd <- "C:\\VerdeRiver_2Dmodeling_fromChris\\1Beasley_US\\" # Set path to Chris's results
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Set inputs
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species = "fakefish"
lifestages = list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages # list of Bricks by lifestage
# For every iric output file (csv) in iric_results,
for (i in iric_results) {
# get iric output i
df_i <-  read.csv(i,skip = 2,header = T)
df_i <- setnames(df_i,c(12,15),c("VelocityMag","ShearSMag")) # remove spaces from habitat variable names; need to work out kinks in results
# set the discharge of iric output i as q_i [character]
q_i <- sub("Result_","",sub(".csv","",i))
# Transfer values from iric output i to the cells of raster r, but only when the cell is inundated (!= 0)
# If multiple points from the iric output are within a cell of r, the mean points is used for the cell value.
r_i <- rasterize(x = df_i[,c("X","Y")],y = r, field = ifelse(df_i[,"Depth"] == 0,NA,df_i[,val]),fun = mean)
# set projection of raster i
proj4string(r_i) <- CRS("+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") # changed zone from 10 to 12
# Resample raster i using bilinear interpolation to fill in those cells in r_i that did not have a cell value due to no point overlap
r_rsmpl_i <- raster::projectRaster(from=r_i,to=SMR_elev,method = 'bilinear')
# update the name of the resampled raster to include the units of the discharge measure
names(r_rsmpl_i) <- paste0("cms",q_i)
# add resampled raster to the list
SMR_Q_l[[i]] <- r_rsmpl_i
# Create vector modeled qs
modeled_q <- c(modeled_q,as.numeric(q_i))
}
# Set inputs
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species = "fakefish"
lifestages = list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet))
}
names(iricValRast) <-habMets #name Stacks by their variable
iricValRast <- list()
stack(iric.process.smr(wd,inMet)
)
# Set this to the IRIC_Processing_in_R_v1 folder to run this code
setwd(paste(wd,"results\\",sep = "")) # DEM and iRIC calculation results must be in their own folder
# read in elevation surface from the working directory
SMR_elev <- raster("VerdeBeasley1Elev.tif")
#plot(SMR_elev)
# get names of iric output csv files in the working directory
iric_results <- list.files(pattern = ".csv") # working directory cannot contain any csv's besides results
# create an empty raster with the extent, resolution, and projection of the DEM.
e <- extent(SMR_elev)
res <- res(SMR_elev)
r <- raster(x = e,resolution = res,crs = "+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") # changed zone from 10 to 12
# read in one of the result files to view head and QAQC
read.csv(iric_results[1],skip = 2,header = T) %>%
head()
# Variables that will define the values of the processed iric result grid
val = inMet
# Create empty list to contain rasters
SMR_Q_l <- list()
# Create empty vector to contain modeled Qs
modeled_q <- c()
# For every iric output file (csv) in iric_results,
for (i in iric_results) {
# get iric output i
df_i <-  read.csv(i,skip = 2,header = T)
df_i <- setnames(df_i,c(12,15),c("VelocityMag","ShearSMag")) # remove spaces from habitat variable names; need to work out kinks in results
# set the discharge of iric output i as q_i [character]
q_i <- sub("Result_","",sub(".csv","",i))
# Transfer values from iric output i to the cells of raster r, but only when the cell is inundated (!= 0)
# If multiple points from the iric output are within a cell of r, the mean points is used for the cell value.
r_i <- rasterize(x = df_i[,c("X","Y")],y = r, field = ifelse(df_i[,"Depth"] == 0,NA,df_i[,val]),fun = mean)
# set projection of raster i
proj4string(r_i) <- CRS("+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") # changed zone from 10 to 12
# Resample raster i using bilinear interpolation to fill in those cells in r_i that did not have a cell value due to no point overlap
r_rsmpl_i <- raster::projectRaster(from=r_i,to=SMR_elev,method = 'bilinear')
# update the name of the resampled raster to include the units of the discharge measure
names(r_rsmpl_i) <- paste0("cms",q_i)
# add resampled raster to the list
SMR_Q_l[[i]] <- r_rsmpl_i
# Create vector modeled qs
modeled_q <- c(modeled_q,as.numeric(q_i))
}
# Returns list of rasters
return(SMR_Q_l)
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet))
iric.process.smr(wd,inMet)
#wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
wd <- "C:\\VerdeRiver_2Dmodeling_fromChris\\1Beasley_US\\" # Set path to Chris's results
# Function: This script serves as the master script that controls which functions are run and what inputs are used for finding suitable fish habitat
#         It will later be converted to the script that controls the Shiny App.
# Last edited by Elaina Passero on 02/13/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis","ggplot2","data.table")
require(packages)
lapply(packages,require,character.only=TRUE)
# Set file locations
#wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
wd <- "C:\\VerdeRiver_2Dmodeling_fromChris\\1Beasley_US\\" # Set path to Chris's results
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Set inputs
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species = "fakefish"
lifestages = list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages # list of Bricks by lifestage
# Function: This script serves as the master script that controls which functions are run and what inputs are used for finding suitable fish habitat
#         It will later be converted to the script that controls the Shiny App.
# Last edited by Elaina Passero on 02/13/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis","ggplot2","data.table")
require(packages)
lapply(packages,require,character.only=TRUE)
# Set file locations
#wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
wd <- "C:\\VerdeRiver_2Dmodeling_fromChris\\1Beasley_US\\" # Set path to Chris's results
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Set inputs
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species = "fakefish"
lifestages = list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages # list of Bricks by lifestage
crs(SMR_elev)
# Set this to the IRIC_Processing_in_R_v1 folder to run this code
setwd(paste(wd,"results\\",sep = "")) # DEM and iRIC calculation results must be in their own folder
# read in elevation surface from the working directory
SMR_elev <- raster("VerdeBeasley1Elev.tif")
crs(SMR_elev)
# Function: This script serves as the master script that controls which functions are run and what inputs are used for finding suitable fish habitat
#         It will later be converted to the script that controls the Shiny App.
# Last edited by Elaina Passero on 02/13/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis","ggplot2","data.table")
require(packages)
lapply(packages,require,character.only=TRUE)
# Set Inputs
wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species = "fakefish"
lifestages = list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
reachName = "1Beasley"
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet,DEM,reachName))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages # list of Bricks by lifestage
# Function: This script serves as the master script that controls which functions are run and what inputs are used for finding suitable fish habitat
#         It will later be converted to the script that controls the Shiny App.
# Last edited by Elaina Passero on 02/13/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis","ggplot2","data.table")
require(packages)
lapply(packages,require,character.only=TRUE)
# Set Inputs
wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
habMets = list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species = "fakefish"
lifestages = list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
reachName = "1Beasley"
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet,DEM,reachName))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages # list of Bricks by lifestage
# Function: This script serves as the master script that controls which functions are run and what inputs are used for finding suitable fish habitat
#         It will later be converted to the script that controls the Shiny App.
# Last edited by Elaina Passero on 02/13/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis","ggplot2","data.table")
require(packages)
lapply(packages,require,character.only=TRUE)
# Set Inputs
wd <- "C:\\Users\\epassero\\Desktop\\VRDSS\\verde-refdss\\" # Set path to local repository
habMets <- list("Depth","VelocityMag") #Variables from iRIC calculation result used for habitat analysis
species <- "fakefish"
lifestages <- list("adult","juvenile") #lifestages from oldest to youngest; must match order in HSC table
reachName <- "1Beasley"
DEM <- "VerdeBeasley1Elev.tif"
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet,DEM,reachName))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages # list of Bricks by lifestage
# Load functions
source(paste(wd,"iric.process.smr.R",sep="\\"))
source(paste(wd, "stacks.rc.R",sep="\\"))
# Run functions
## Convert iRIC outputs to rasterStacks by variable
iricValRast <- list()
for(a in 1:length(habMets)) {
iricValRast[[a]] <- list(paste(habMets[[a]]))
inMet <- habMets[[a]]
iricValRast[[a]] <- stack(iric.process.smr(wd,inMet,DEM,reachName))
}
names(iricValRast) <-habMets #name Stacks by their variable
## Reclassify Stacks with hydraulic HSC by lifestage
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
hydHabList <- list() # list that will hold suitable hydraulic habitat by lifestage
for(b in 1:length(lifestages)){
hsc <- hsc_allages[b] # creates HSC table for current lifestage
hydHabList[[b]] <- stacks.rc(iricValRast,hsc,habMets)
}
names(hydHabList) <- lifestages # list of Bricks by lifestage
plot(hydHabList)
plot(hydHabList[[1]])
plot(hydHabList[[1]],col="black")
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
View(hsc_allages)
hsc_allages$substrate
hsc_allages$substrate[1]
as.vector(hsc_allages$substrate[1])
vt<- as.vector(hsc_allages$substrate[1])
vt<- as.numeric(hsc_allages$substrate[1])
hsc_allages<-fread(paste(wd,species,"_hsc",".csv",sep = ""), header=TRUE, sep=",")
sub_allages<-fread(paste(wd,species,"_substrate",".csv",sep=""),header=FALSE, sep = ",") # load substrate requirements
View(sub_allages)
View(hsc_allages)
CheckSub <- "Yes"
CheckSub <- 1
if(CheckSub == "1"){sub_all<-fread(paste(wd,species,"_substrate",".csv",sep=""),header=FALSE, sep = ",")} # load substrate requirements
hhList <- hydHabList[[b]]
fakeSub <- iricValRast[[1]]
fakeSub <- iricValRast[[1]]$Result_0005.18.csv
plot(fakeSub)
