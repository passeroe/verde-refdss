}
View(ten_day_min)
names(scene_list)
for(i in 1:length(scene_list)){
ten_day_min <- bind_rows(ten_day_min,scene_fish_out[[i]][[a]][["avg_monthly_area"]][[1]]) %>%
mutate(scene = names(scene_list)[i])
}
# create table of 10-day minimum habitat area that includes both scenarios
ten_day_min <- data.frame()
for(i in 1:length(scene_list)){
avg_mon_area <- scene_fish_out[[i]][[a]][["avg_monthly_area"]][[1]] %>%
mutate(scene = names(scene_list)[i])
ten_day_min <- bind_rows(ten_day_min,avg_mon_area)
}
View(hydrograph)
View(hydrograph)
ten_day_min_pt <- ten_day_min %>%
mutate(fill_date = paste(year(date),"-",month(date),"-15",sep=""))
for(i in 1:length(scene_list)){
avg_mon_area <- scene_fish_out[[i]][[a]][["avg_monthly_area"]][[1]] %>%
mutate(scene = names(scene_list)[i])
ten_day_min <- bind_rows(ten_day_min,avg_mon_area) %>%
rename(year=year(date),month=month(date))
}
for(i in 1:length(scene_list)){
avg_mon_area <- scene_fish_out[[i]][[a]][["avg_monthly_area"]][[1]] %>%
mutate(scene = names(scene_list)[i])
ten_day_min <- bind_rows(ten_day_min,avg_mon_area)
colnames(ten_day_min,c("year","month"))
}
# create table of 10-day minimum habitat area that includes both scenarios
ten_day_min <- data.frame()
for(i in 1:length(scene_list)){
avg_mon_area <- scene_fish_out[[i]][[a]][["avg_monthly_area"]][[1]] %>%
mutate(scene = names(scene_list)[i])
ten_day_min <- bind_rows(ten_day_min,avg_mon_area)
colnames(ten_day_min,c("year","month","mon_avg_low_area","scene"))
}
?rename
for(i in 1:length(scene_list)){
avg_mon_area <- scene_fish_out[[i]][[a]][["avg_monthly_area"]][[1]] %>%
mutate(scene = names(scene_list)[i])
ten_day_min <- bind_rows(ten_day_min,avg_mon_area) %>%
rename(year="year(date)")
}
# create table of 10-day minimum habitat area that includes both scenarios
ten_day_min <- data.frame()
for(i in 1:length(scene_list)){
avg_mon_area <- scene_fish_out[[i]][[a]][["avg_monthly_area"]][[1]] %>%
mutate(scene = names(scene_list)[i])
ten_day_min <- bind_rows(ten_day_min,avg_mon_area) %>%
rename(year="year(date)",month="month(date)")
}
# create table of 10-day minimum habitat area that includes both scenarios
ten_day_min <- data.frame()
for(i in 1:length(scene_list)){
avg_mon_area <- scene_fish_out[[i]][[a]][["avg_monthly_area"]][[1]] %>%
mutate(scene = names(scene_list)[i])
ten_day_min <- bind_rows(ten_day_min,avg_mon_area)
}
mutate(fill_date = paste(year,"-",month,"-15",sep=""))
ten_day_min_pt <- ten_day_min %>%
rename(year="year(date)",month="month(date)") %>%
mutate(fill_date = paste(year,"-",month,"-15",sep=""))
# create table of 10-day minimum habitat area that includes both scenarios
ten_day_min <- data.frame()
for(i in 1:length(scene_list)){
avg_mon_area <- scene_fish_out[[i]][[a]][["avg_monthly_area"]][[1]] %>%
mutate(scene = names(scene_list)[i])
ten_day_min <- bind_rows(ten_day_min,avg_mon_area)
}
View(ten_day_min)
View(ten_day_min_pt)
ten_day_min_pt <- ten_day_min %>%
rename(year="year(date)",month="month(date)") %>%
mutate(fill_date = as.Date(paste(year,"-",month,"-15",sep="")))
View(rcl_ep)
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,linetype=scene))+
geom_line()
ts_min_plt
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()
ts_min_plt
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
ggthemes::theme_gray()
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
ggthemes::theme_grey()+
geom_line()
namespace:ggthemes
?ggthemes
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
theme_gray()+
geom_line()
ts_min_plt
?labs
a
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.position = c(0.99,0.99),legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,a))+
scale_colour_manual(values = c("#225731","#195E90"),labels=c("Scenario","Historic"))
ts_min_plt
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()
ts_min_plt
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.position = c(0.99,0.99),legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))
ts_min_plt
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))
ts_min_plt
max(ten_day_min_pt$fill_date)
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(breaks = seq(1:max(year)))
ts_min_plt
seq(1:max(ten_day_min_pt$year))
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(breaks = seq(min(ten_day_min_pt$year):max(ten_day_min_pt$year)))
ts_min_plt
seq(min(ten_day_min_pt$year):max(ten_day_min_pt$year)
seq(min(ten_day_min_pt$year):max(ten_day_min_pt$year))
seq(min(ten_day_min_pt$year):max(ten_day_min_pt$year))
min(ten_day_min_pt$year)
seq(1988:2018)
seq(1988:2018,1)
?seq
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(date_breaks = "1 year"))
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(date_breaks = "1 year")
ts_min_plt
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(breaks=year)
ts_min_plt
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(date_breaks = "1 year",date_labels = "%Y")
ts_min_plt
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=14,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain",angle = 45),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(date_breaks = "1 year",date_labels = "%Y")
ts_min_plt
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=12,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain",angle = 45),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(date_breaks = "1 year",date_labels = "%Y")
ts_min_plt
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(family="Times New Roman", size=12,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain",angle = 45,hjust=1),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(date_breaks = "1 year",date_labels = "%Y")
ts_min_plt
# Boxplots of habitat distribution by year
hab_by_yr <- data.frame()
warnings()
# plot time series of 10 day min area
ts_min_plt <- ggplot(ten_day_min_pt,aes(x=fill_date,y=mon_avg_low_area,color=scene))+
geom_line()+
theme_gray()+
theme(text=element_text(size=12,face = "bold"),
panel.border = element_rect(fill = NA,size=1),
legend.justification = c("right","top"),
axis.text.x = element_text(colour = "black",face="plain",angle = 45,hjust=1),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y=bquote('Minimum 10-day Habitat Area in '~m^2),x="Year",title=paste(reach_name,", ",a,sep=""))+
scale_colour_manual(values = c("red","black"),labels=c("Scenario","Historic"))+
scale_x_date(date_breaks = "1 year",date_labels = "%Y")
ts_min_plt
# Boxplots of habitat distribution by year
hab_by_yr <- data.frame()
for(i in 1:length(scene_list)){
inter_tab <- scene_fish_out[[i]][[a]][["inter_tab"]][[1]] %>%
mutate(scene = names(scene_list)[i])
hab_by_yr <- bind_rows(hab_by_yr,inter_tab)
}
View(hab_by_yr)
hab_by_yr_pt <- hab_by_yr %>%
group_by(year)
hab_by_yr_pt <- hab_by_yr %>%
group_by(year(date))
View(hab_by_yr_pt)
?rasterize
?raster
extent(good_rast)
# This script will house the pre-processing options and functionality
# This script will process 2D hydraulic modeling results
# This script will rasterize substrate maps if applicable
# Last edited by Elaina Passero on 11/05/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis",
"ggplot2","data.table","dplyr","plotly","spex","stars","igraph","deldir","hydroTSM","rlist")
#  Check to see if each is installed, and install if not.
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
# load the installed libraries in the packages list
lapply(packages,library,character.only=TRUE)
## Primary Inputs
wd <- "C:/Users/epassero/Desktop/VRDSS/verde-refdss/" # Project working directory
#wd <- "/Users/Morrison/Documents/Active Research Projects/Verde REFDSS/verde-refdss/" # Set path to local repository
setwd(wd)
hab_mets <- list("Depth","Velocity") #Variables from iRIC calculation result used for habitat analysis - case sensitive!
reach_name <- "USBeasley1" # Should match name of folder with results
dis_unit <- "cms" #units of discharge
# Yes- external rasters or No- rasterize iRIC results. Inputs required if No.
LoadExternal <- "No"; if(LoadExternal=="No"){
skip_num <- 0 # number of rows to skip when reading in raw outputs
x_loc <- "X" # field name of X coordinate in model outputs - case sensitive
y_loc <- "Y" # field name of y coordinate in model outputs - case sensitive
dem <- "BeasleyUS_0.25m_20191108.tif" # Name of dem: VerdeBeasley1Elev.tif, smrf_dem_v241.tif, braidallpts_dem.tif, GilaMGnd.tif
# Does the resolution of the rasters need to be manually set? If No, dem resolution will be used.
setRes <- "No"; if(setRes=="Yes"){
res <- c(1,1)} # resolution of rasters if they need to be manually set
}
## Options - If set to No, inputs are not required for option
# Yes or No. Choose whether or not to check substrate conditions as part of suitable habitat
CheckSub <- "Yes"; if(CheckSub=="Yes"){
sub_name <- "BeasleyUS_SedThiessenPoly1Dissolved" # shapefile name with no extension BeasleyUS_SedThiessenPoly1Dissolved
sub_field <- "ParticalSi"} # name of field in substrate map containing substrate type info; ParticalSi or substrate
### Begin Processing ###
reach_wd <- paste(wd,"reaches","/",reach_name,"/",sep = "")
rasterOptions(overwrite = TRUE,tmpdir = paste(reach_wd,"temp/",sep=""))
pre_outputs <- list()
if(LoadExternal == "No"){
## Format result CSVs and get list of discharges
source("get.results.R")
temp_list <- get.results(reach_wd,skip_num,dis_unit)
delim_list <- temp_list$delim_list
modeled_q <- temp_list$modeled_q
rm(temp_list)
## Convert iRIC outputs to rasterBricks by variable
source("iric.process.smr.R")
out_val_rast <- list()
out_val_rast <- lapply(hab_mets, function(m) iric.process.smr(m,delim_list,reach_wd,dem,setRes,x_loc,y_loc))
names(out_val_rast) <-hab_mets
} else{
## Load in external rasterBricks and discharges
source("load.cherry.R")
out_val_rast <- load.cherry(reach_wd,Check0Flow)
names(out_val_rast)<-c(hab_mets,"modeled_q")
modeled_q <- out_val_rast$modeled_q
out_val_rast[length(out_val_rast)]<-NULL
}
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis",
"ggplot2","data.table","dplyr","plotly","spex","stars","igraph","deldir","hydroTSM","rlist")
#  Check to see if each is installed, and install if not.
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
# load the installed libraries in the packages list
lapply(packages,library,character.only=TRUE)
## Primary Inputs
wd <- "C:/Users/epassero/Desktop/VRDSS/verde-refdss/" # Project working directory
#wd <- "/Users/Morrison/Documents/Active Research Projects/Verde REFDSS/verde-refdss/" # Set path to local repository
setwd(wd)
hab_mets <- list("Depth","Velocity","WaterSurfaceElevation") #Variables from iRIC calculation result used for habitat analysis - case sensitive!
reach_name <- "USBeasley1" # Should match name of folder with results
dis_unit <- "cms" #units of discharge
# Yes- external rasters or No- rasterize iRIC results. Inputs required if No.
LoadExternal <- "No"; if(LoadExternal=="No"){
skip_num <- 0 # number of rows to skip when reading in raw outputs
x_loc <- "X" # field name of X coordinate in model outputs - case sensitive
y_loc <- "Y" # field name of y coordinate in model outputs - case sensitive
dem <- "BeasleyUS_0.25m_20191108.tif" # Name of dem: VerdeBeasley1Elev.tif, smrf_dem_v241.tif, braidallpts_dem.tif, GilaMGnd.tif
# Does the resolution of the rasters need to be manually set? If No, dem resolution will be used.
setRes <- "No"; if(setRes=="Yes"){
res <- c(1,1)} # resolution of rasters if they need to be manually set
}
## Options - If set to No, inputs are not required for option
# Yes or No. Choose whether or not to check substrate conditions as part of suitable habitat
CheckSub <- "Yes"; if(CheckSub=="Yes"){
sub_name <- "BeasleyUS_SedThiessenPoly1Dissolved" # shapefile name with no extension BeasleyUS_SedThiessenPoly1Dissolved
sub_field <- "ParticalSi"} # name of field in substrate map containing substrate type info; ParticalSi or substrate
### Begin Processing ###
reach_wd <- paste(wd,"reaches","/",reach_name,"/",sep = "")
rasterOptions(overwrite = TRUE,tmpdir = paste(reach_wd,"temp/",sep=""))
pre_outputs <- list()
if(LoadExternal == "No"){
## Format result CSVs and get list of discharges
source("get.results.R")
temp_list <- get.results(reach_wd,skip_num,dis_unit)
delim_list <- temp_list$delim_list
modeled_q <- temp_list$modeled_q
rm(temp_list)
## Convert iRIC outputs to rasterBricks by variable
source("iric.process.smr.R")
out_val_rast <- list()
out_val_rast <- lapply(hab_mets, function(m) iric.process.smr(m,delim_list,reach_wd,dem,setRes,x_loc,y_loc))
names(out_val_rast) <-hab_mets
} else{
## Load in external rasterBricks and discharges
source("load.cherry.R")
out_val_rast <- load.cherry(reach_wd,Check0Flow)
names(out_val_rast)<-c(hab_mets,"modeled_q")
modeled_q <- out_val_rast$modeled_q
out_val_rast[length(out_val_rast)]<-NULL
}
pre_outputs$out_val_rast <- out_val_rast
pre_outputs$modeled_q <- modeled_q
## Load substrate
if(CheckSub == "Yes"){
base_rast <- out_val_rast[[1]][[1]] # will be overwritten during rasterization - provides setup
sub_map <- readOGR(dsn=paste(wd,"reaches", "/", reach_name, sep=""),layer=sub_name) # read in substrate shapefile
rast_sub_map <- rasterize(sub_map,base_rast,field=sub_map@data[[sub_field]],update=TRUE)
pre_outputs$rast_sub_map <- rast_sub_map
}
# save outputs for internal use
list.save(pre_outputs,file=paste(reach_wd,reach_name,"_pre_outputs.rdata",sep=""))
# This script will house the fish processing options and functionality
# This script will produce area-lookup tables by species for fish
# Last edited by Elaina Passero on 11/19/19
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis",
"ggplot2","data.table","dplyr","plotly","spex","stars","igraph","deldir","hydroTSM","rlist")
#  Check to see if each is installed, and install if not.
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
# load the installed libraries in the packages list
lapply(packages,library,character.only=TRUE)
### Begin Inputs ###
## Primary Inputs
wd <- "C:/Users/epassero/Desktop/VRDSS/verde-refdss/" # Project working directory
#wd <- "/Users/Morrison/Documents/Active Research Projects/Verde REFDSS/verde-refdss/" # Set path to local repository
setwd(wd)
hab_mets <- list("Depth","Velocity") #Variables from iRIC calculation result used for habitat analysis - case sensitive
species_list <- c("longfindace","desertsucker") #"sonoransucker") #"yellowbullhead", "sonoransucker","redshiner","roundtailchub","greensunfish","fatheadminnow","speckleddace")
#species <- "longfindace"
lifestages <- list("adult") #lifestages from oldest to youngest; must match order in HSC table
reach_name <- "USBeasley1" # Should match name of folder with results
dis_unit <- "cms" #units of discharge
## Secondary Inputs - Use only if switching between projects
Check0Flow <- "No" # Yes- Calculate max area for 0-flow scenario and interpolate below min modeled Q. No - 0 flow = 0 area.
if(Check0Flow=="Yes"){
depth0Flow <- "d_cfs_0m" # raster name for 0 flow depth
}# end of internal rasterization inputs;
## Options - If set to No, inputs are not required for option
# Yes or No. Choose whether or not to check substrate conditions as part of suitable habitat
CheckSub <- "Yes"
# Yes or No. Choose whether or not to remove isolated (single cell) habitat patches
RemoveIslands <- "Yes"; if(RemoveIslands=="Yes"){
island_size <- 2} # number of raster cells that is considered too small of a habitat patch
# Yes or No. Choose whether or not to normalize habitat area by reach length
NormalizeByL <- "No"; if(NormalizeByL=="Yes"){
reach_length <- 0.61
length_unit <- "km"}
# Yes or No. Export Rasters of Habitat by Discharge per lifestage and species
ExportRast <- "Yes"
# Yes or No. Export habitat area-lookup tables
ExportTable <- "Yes"
### Begin Processing ###
reach_wd <- paste(wd,"reaches","/",reach_name,"/",sep = "")
output_name <- load(file=paste(reach_wd,reach_name,"_pre_outputs.rdata",sep="")) # load fish outputs
eval(parse(text=paste("pre_outputs=",output_name)))
out_val_rast <- pre_outputs$out_val_rast
modeled_q <- pre_outputs$modeled_q
if(CheckSub == "Yes"){
rast_sub_map <- pre_outputs$rast_sub_map
}
##### Run for all species #####
fish_outputs <- list()
fish_outputs <- lapply(species_list, function(species){ # builds tables and maps for all species in list
fish <- species
## Reclassify Bricks with hydraulic and substrate HSC by lifestage
source("find.hsc.R"); source("bricks.rc.R"); source("by.substrate.R"); source("find.sub.R"); source("remove.islands.R")
hsc_all_spec <- fread(paste(reach_wd,"habitat_info","/",reach_name,"_hsc",".csv",sep = ""),
header=TRUE, sep=",",data.table = FALSE)
hsc_all_ages <- find.hsc(hsc_all_spec,species) # extract HSC for single species
good_hab_list <- lapply(lifestages, function(a) bricks.rc(a,out_val_rast,hsc_all_ages,hab_mets))
names(good_hab_list) <- lifestages # list of Bricks by lifestage
# Not sure if this is working correctly yet
if(CheckSub == "Yes"){
sub_all_spec <- fread(paste(reach_wd,"habitat_info","/",reach_name,"_substrate",".csv",sep=""),
header=TRUE, sep = ",",data.table = FALSE) # load substrate requirements
sub_all_ages <- find.sub(sub_all_spec,species) # extract substrate requirements for single species
good_hab_list <- lapply(lifestages, function(a) by.substrate(a, good_hab_list, sub_all_ages,rast_sub_map))
names(good_hab_list) <- lifestages
} # end of if statement
if(RemoveIslands == "Yes"){
good_hab_list <- lapply(lifestages, function(a) remove.islands(a,good_hab_list,RemoveIslands,island_size))
names(good_hab_list) <- lifestages
}
## Total available habitat area by lifestage
source("total.area.R")
area_look_tab <- lapply(lifestages, function(a) total.area(a,good_hab_list,modeled_q,NormalizeByL,reach_length,hab_mets,ExportTable,fish))
names(area_look_tab) <- lifestages
## Order rasters of total available habitat by modeled discharge
source("order.by.q.R")
out_by_q <- lapply(lifestages, function(a) order.by.q(a,good_hab_list,modeled_q,ExportRast,reach_wd,fish))
names(out_by_q) <- lifestages
rast_by_q <- unlist(lapply(lifestages, function(a){out_by_q[[a]][[1]]}))
sort_q <- unlist(lapply(lifestages, function(a){out_by_q[[a]][[2]]}))
# condense outputs into a single list
fish_outputs$area_look_tab <- area_look_tab
fish_outputs$rast_by_q <- rast_by_q
return(fish_outputs)
}) # end of species list function
