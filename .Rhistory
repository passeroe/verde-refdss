# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_ouputs) <- names(scene_list)
# create list of flow scenario data frames
if(LoadScenario == "Yes"){
scene_list <- lapply(scene_names, function(s){
output_name <- load(file=paste(reach_wd,"flow_scenarios","/",s,"_q.rdata",sep="")) # scenario time series
eval(parse(text=paste("flow_scenes=",output_name)))
})
names(scene_list) <- scene_names
scene_list$hydrograph <- hydrograph
} else{
scene_list <- list(hydrograph)
}
scene_ouputs <- list()
scene_ouputs <- lapply(scene_list, function(s){
# Fish post-processing
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_ouputs) <- names(scene_list)
length(lifestages)
# create list of flow scenario data frames
if(LoadScenario == "Yes"){
scene_list <- lapply(scene_names, function(s){
output_name <- load(file=paste(reach_wd,"flow_scenarios","/",s,"_q.rdata",sep="")) # scenario time series
eval(parse(text=paste("flow_scenes=",output_name)))
})
names(scene_list) <- scene_names
scene_list$hydrograph <- hydrograph
} else{
scene_list <- list(hydrograph)
}
scene_ouputs <- list()
scene_ouputs <- lapply(scene_list, function(s){
# Fish post-processing
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_ouputs) <- names(scene_list)
# create list of flow scenario data frames
if(LoadScenario == "Yes"){
scene_list <- lapply(scene_names, function(s){
output_name <- load(file=paste(reach_wd,"flow_scenarios","/",s,"_q.rdata",sep="")) # scenario time series
eval(parse(text=paste("flow_scenes=",output_name)))
})
names(scene_list) <- scene_names
scene_list$hydrograph <- hydrograph
} else{
scene_list <- list(hydrograph)
}
scene_ouputs <- list()
scene_ouputs <- lapply(scene_list, function(s){
# Fish post-processing
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_ouputs) <- names(scene_list)
# create list of flow scenario data frames
if(LoadScenario == "Yes"){
scene_list <- lapply(scene_names, function(s){
output_name <- load(file=paste(reach_wd,"flow_scenarios","/",s,"_q.rdata",sep="")) # scenario time series
eval(parse(text=paste("flow_scenes=",output_name)))
})
names(scene_list) <- scene_names
scene_list$hydrograph <- hydrograph
} else{
scene_list <- list(hydrograph)
}
scene_ouputs <- list()
scene_ouputs <- lapply(scene_list, function(s){
# Fish post-processing
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_ouputs) <- names(scene_list)
# create list of flow scenario data frames
if(LoadScenario == "Yes"){
scene_list <- lapply(scene_names, function(s){
output_name <- load(file=paste(reach_wd,"flow_scenarios","/",s,"_q.rdata",sep="")) # scenario time series
eval(parse(text=paste("flow_scenes=",output_name)))
})
names(scene_list) <- scene_names
scene_list$hydrograph <- hydrograph
} else{
scene_list <- list(hydrograph)
}
scene_ouputs <- list()
scene_ouputs <- lapply(scene_list, function(s){
# Fish post-processing
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_ouputs) <- names(scene_list)
# create list of flow scenario data frames
if(LoadScenario == "Yes"){
scene_list <- lapply(scene_names, function(s){
output_name <- load(file=paste(reach_wd,"flow_scenarios","/",s,"_q.rdata",sep="")) # scenario time series
eval(parse(text=paste("flow_scenes=",output_name)))
})
names(scene_list) <- scene_names
scene_list$hydrograph <- hydrograph
} else{
scene_list <- list(hydrograph)
}
scene_ouputs <- list()
scene_ouputs <- lapply(scene_list, function(s){
# Fish post-processing
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_ouputs) <- names(scene_list)
View(inter_tab)
select(inter_tab,-juvenile)
inter_tab[[2]] <- NULL
# one data frame for all lifestages
if(length(lifestages) > 1){
i_tab_all_age <- bind_rows(inter_tab,.id = "lifestage") %>%
pivot_longer()
} else{
i_tab_all_age <- unlist(inter_tab) %>%
mutate(lifestage == lifestages[[1]])
}
lifestages[[1]]
# one data frame for all lifestages
if(length(lifestages) > 1){
i_tab_all_age <- bind_rows(inter_tab,.id = "lifestage") %>%
pivot_longer()
} else{
i_tab_all_age <- unlist(inter_tab) %>%
mutate(lifestage = lifestages[[1]])
}
unlist(inter_tab)
# one data frame for all lifestages
if(length(lifestages) > 1){
i_tab_all_age <- bind_rows(inter_tab,.id = "lifestage") %>%
pivot_longer()
} else{
i_tab_all_age <-inter_tab[[1]] %>%
mutate(lifestage = lifestages[[1]])
}
# create list of flow scenario data frames
if(LoadScenario == "Yes"){
scene_list <- lapply(scene_names, function(s){
output_name <- load(file=paste(reach_wd,"flow_scenarios","/",s,"_q.rdata",sep="")) # scenario time series
eval(parse(text=paste("flow_scenes=",output_name)))
})
names(scene_list) <- scene_names
scene_list$hydrograph <- hydrograph
} else{
scene_list <- list(hydrograph)
}
scene_ouputs <- list()
scene_ouputs <- lapply(scene_list, function(s){
# Fish post-processing
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_ouputs) <- names(scene_list)
View(i_tab_all_age)
# create list of flow scenario data frames
if(LoadScenario == "Yes"){
scene_list <- lapply(scene_names, function(s){
output_name <- load(file=paste(reach_wd,"flow_scenarios","/",s,"_q.rdata",sep="")) # scenario time series
eval(parse(text=paste("flow_scenes=",output_name)))
})
names(scene_list) <- scene_names
scene_list$hydrograph <- hydrograph
} else{
scene_list <- list(hydrograph)
}
scene_ouputs <- list()
scene_ouputs <- lapply(scene_list, function(s){
# Fish post-processing
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_ouputs) <- names(scene_list)
str(scene_outputs)
scene_outputs <- list()
scene_outputs <- lapply(scene_list, function(s){
# Fish post-processing
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,hydrograph,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_outputs) <- names(scene_list)
lapply(scene_outputs, function(s){
list.save(s,file=paste(reach_wd,"dss_outputs/",reach_name,"_",s,"_post_fish.rdata",sep=""))
})
# save outputs for internal use
# will generate a list of the scenarios being run and then save them with the proper names
for(s in 1:length(scene_outputs)){
scene <- names(scene_outputs[[s]])
list.save(scene_outputs[[s]],file=paste(reach_wd,"dss_outputs/",reach_name,"_",scene,"_post_fish.rdata",sep=""))
}
1:length(scene_outputs)
names(scene_outputs[[1]])
names(scene_outputs)[[1]]
# save outputs for internal use
# will generate a list of the scenarios being run and then save them with the proper names
for(s in 1:length(scene_outputs)){
scene <- names(scene_outputs)[[s]]
list.save(scene_outputs[[s]],file=paste(reach_wd,"dss_outputs/",reach_name,"_",scene,"_post_fish.rdata",sep=""))
}
write.csv(flow_scene,file=paste(reach_wd,"flow_scenarios","/",reach_name,"_",scene_name,".csv",sep=""))
?lod
?load
rm(scene_ouputs)
