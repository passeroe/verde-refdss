list.save(scene_fish_out[[s]],file=paste(reach_wd,"dss_outputs/",reach_name,"_",scene,"_post_fish.rdata",sep=""))
}
# Fish post-processing
scene_fish_out <- list()
scene_fish_out <- lapply(scene_names, function(scene_name){
s <- scene_list[[scene_name]]
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
one_spec <- fish_outputs[[species]]
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,s,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL,species,scene_name)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(scene_fish_out) <- names(scene_list)
# save outputs (dss_outputs) for internal use
for(s in 1:length(scene_fish_out)){
scene <- names(scene_fish_out)[[s]]
list.save(scene_fish_out[[s]],file=paste(reach_wd,"dss_outputs/",reach_name,"_",scene,"_post_fish.rdata",sep=""))
}
source("build.10day.tables.R") # currently set up for adults only
ten_day_min_outputs <- lapply(species_list, function(species) build.10day.tables(species,scene_list,scene_fish_out))
names(ten_day_min_outputs) <- species_list
for(f in 1:length(ten_day_min_outputs)){
species <- species_list[[f]]
tab <- ten_day_min_outputs[[species]]$sum_all_yrs
tab_dif <- ten_day_min_outputs[[species]]$sum_all_yrs_dif
write.csv(tab,file=paste(species,"_10day_min_sum.csv",sep=""))
write.csv(tab_dif,file=paste(species,"_10day_min_chg.csv",sep=""))
}
source("make.barplots.chg.R")
chg_barplots <- lapply(species_list, function(species) make.barplots.chg(species,ten_day_min_outputs))
source("interp.plot.abbr.R")
scenario <- "scenario1"
# annual
inter_plots_ann <- lapply(species_list, function(species) {
inter_tab <- scene_fish_out[[scenario]][[species]]$inter_tab
write.csv(inter_tab,file = paste(scenario,"_",species,"_tab.csv",sep=""))
interp.plot.abbr(inter_tab,NormalizeByL,as.Date("1999-01-01"),as.Date("1999-12-31"),scenario,species)
ggsave(paste(scenario,"_",species,"_","annual.png",sep=""),width=7, height=5,units = "in")
})
names(inter_plots_ann) <- species_list
inter_plots_ann
# monthly
inter_plots_mon <- lapply(species_list, function(species) {
inter_tab <- scene_fish_out[[scenario]][[species]]$inter_tab
interp.plot.abbr(inter_tab,NormalizeByL,as.Date("1999-07-01"),as.Date("1999-08-31"),scenario,species)
ggsave(paste(scenario,"_",species,"_","monthly.png",sep=""),width=7, height=5,units = "in")
})
names(inter_plots_mon) <- species_list
inter_plots_mon
scene_list <- scene_list$scenario1
scene_names <- "scenario1"
scene_veg_out <- list()
scene_veg_out <- lapply(scene_names, function(scene_name){
s <- scene_list[[scene_name]]
source("q.ep.weibull.R")
hydro_ep <- q.ep.weibull(s,modeled_q,scene_name)
scene_veg_out$hydro_ep <- hydro_ep
# source("make.inun.q.map.R")
# wet_map <- make.inun.q.map(hydro_ep,out_val_rast,modeled_q,scene_name)
# scene_veg_out$wet_map <- wet_map
source("make.ep.maps.R")
ep_map <- make.ep.maps(hydro_ep,out_val_rast,modeled_q,scene_name)
scene_veg_out$ep_map <- ep_map
# make maps of probability of occurrence of vegetation
all_veg_logit <- fread(paste(reach_wd,"habitat_info","/",reach_name,"_veg_pref",".csv",sep=""),
header=TRUE, sep = ",",data.table = FALSE) # load logistic equations
source("find.veg.logit.R"); source("find.prob.occur.R"); source("make.veg.maps.R")
prob_veg_maps <- lapply(veg_list, function(v) {
one_veg_logit <- find.veg.logit(all_veg_logit,v)
hydro_ep_prob <- find.prob.occur(v,hydro_ep,one_veg_logit) # outputs table of discharge, EP of discharge, and Prob of Veg for discharge
prob_veg_maps <- make.veg.maps(v,ep_map,hydro_ep_prob,scene_name)
return(prob_veg_maps)
})
names(prob_veg_maps) <- veg_list
scene_veg_out$prob_veg_maps <- prob_veg_maps
return(scene_veg_out)
}) # end of flow scenario list function
names(scene_veg_out) <- names(scene_list)
# quick run
scene_list <- list(scene_list$scenario1)
scene_names <- "scenario1"
scene_veg_out <- list()
scene_veg_out <- lapply(scene_names, function(scene_name){
s <- scene_list[[scene_name]]
source("q.ep.weibull.R")
hydro_ep <- q.ep.weibull(s,modeled_q,scene_name)
scene_veg_out$hydro_ep <- hydro_ep
# source("make.inun.q.map.R")
# wet_map <- make.inun.q.map(hydro_ep,out_val_rast,modeled_q,scene_name)
# scene_veg_out$wet_map <- wet_map
source("make.ep.maps.R")
ep_map <- make.ep.maps(hydro_ep,out_val_rast,modeled_q,scene_name)
scene_veg_out$ep_map <- ep_map
# make maps of probability of occurrence of vegetation
all_veg_logit <- fread(paste(reach_wd,"habitat_info","/",reach_name,"_veg_pref",".csv",sep=""),
header=TRUE, sep = ",",data.table = FALSE) # load logistic equations
source("find.veg.logit.R"); source("find.prob.occur.R"); source("make.veg.maps.R")
prob_veg_maps <- lapply(veg_list, function(v) {
one_veg_logit <- find.veg.logit(all_veg_logit,v)
hydro_ep_prob <- find.prob.occur(v,hydro_ep,one_veg_logit) # outputs table of discharge, EP of discharge, and Prob of Veg for discharge
prob_veg_maps <- make.veg.maps(v,ep_map,hydro_ep_prob,scene_name)
return(prob_veg_maps)
})
names(prob_veg_maps) <- veg_list
scene_veg_out$prob_veg_maps <- prob_veg_maps
return(scene_veg_out)
}) # end of flow scenario list function
# Yes or No. Yes - bring in flow scenarios for
LoadScenario <- "Yes"; if(LoadScenario == "Yes"){
scene_names <- c("baseline","scenario1","scenario2","scenario3")
}
CompareScenes <- "Yes"
if(LoadScenario == "Yes"){
scene_list <- lapply(scene_names, function(s){
q_ts <- na.omit(fread(file=paste(reach_wd,"flow_scenarios","/",reach_name,"_",s,".csv",sep=""),
header=TRUE, sep = ",",data.table=FALSE)) %>%
mutate(date_form = as.Date(date)) %>%
select(-date) %>%
rename(date = date_form)
if(DateRange=="Yes"){
q_ts <- subset(q_ts, date > as.Date(start_date))
q_ts <- subset(q_ts, date < as.Date(end_date))
}
return(q_ts)
})
names(scene_list) <- scene_names
#scene_list$hydrograph <- hydrograph
scene_names <- names(scene_list) # updated scene name list for labeling
} else{
scene_list <- list(hydrograph)
}
# Riparian vegetation post-processing
output_name <- load(file=paste(reach_wd,reach_name,"_pre_outputs.rdata",sep="")) # load rasterized 2D modeling results
eval(parse(text=paste("pre_outputs=",output_name)))
out_val_rast <- pre_outputs$out_val_rast
modeled_q <- pre_outputs$modeled_q
scene_veg_out <- list()
scene_veg_out <- lapply(scene_names, function(scene_name){
s <- scene_list[[scene_name]]
source("q.ep.weibull.R")
hydro_ep <- q.ep.weibull(s,modeled_q,scene_name)
scene_veg_out$hydro_ep <- hydro_ep
# source("make.inun.q.map.R")
# wet_map <- make.inun.q.map(hydro_ep,out_val_rast,modeled_q,scene_name)
# scene_veg_out$wet_map <- wet_map
source("make.ep.maps.R")
ep_map <- make.ep.maps(hydro_ep,out_val_rast,modeled_q,scene_name)
scene_veg_out$ep_map <- ep_map
# make maps of probability of occurrence of vegetation
all_veg_logit <- fread(paste(reach_wd,"habitat_info","/",reach_name,"_veg_pref",".csv",sep=""),
header=TRUE, sep = ",",data.table = FALSE) # load logistic equations
source("find.veg.logit.R"); source("find.prob.occur.R"); source("make.veg.maps.R")
prob_veg_maps <- lapply(veg_list, function(v) {
one_veg_logit <- find.veg.logit(all_veg_logit,v)
hydro_ep_prob <- find.prob.occur(v,hydro_ep,one_veg_logit) # outputs table of discharge, EP of discharge, and Prob of Veg for discharge
prob_veg_maps <- make.veg.maps(v,ep_map,hydro_ep_prob,scene_name)
return(prob_veg_maps)
})
names(prob_veg_maps) <- veg_list
scene_veg_out$prob_veg_maps <- prob_veg_maps
return(scene_veg_out)
}) # end of flow scenario list function
names(scene_veg_out) <- names(scene_list)
source("interp.plot.abbr.R")
scenario <- "baseline"
# annual
inter_plots_ann <- lapply(species_list, function(species) {
inter_tab <- scene_fish_out[[scenario]][[species]]$inter_tab
write.csv(inter_tab,file = paste(scenario,"_",species,"_tab.csv",sep=""))
interp.plot.abbr(inter_tab,NormalizeByL,as.Date("1990-01-01"),as.Date("1990-12-31"),scenario,species)
ggsave(paste(scenario,"_",species,"_","annual.png",sep=""),width=7, height=5,units = "in")
})
names(inter_plots_ann) <- species_list
inter_plots_ann
# monthly
inter_plots_mon <- lapply(species_list, function(species) {
inter_tab <- scene_fish_out[[scenario]][[species]]$inter_tab
interp.plot.abbr(inter_tab,NormalizeByL,as.Date("1990-07-01"),as.Date("1990-08-31"),scenario,species)
ggsave(paste(scenario,"_",species,"_","monthly.png",sep=""),width=7, height=5,units = "in")
})
names(inter_plots_mon) <- species_list
inter_plots_mon
#agg_sum_df <- ten_day_min_outputs[[species]]$sum_all_yrs_dif
agg_sum_df <- data.frame()
for(i in 1:length(species_list)){
next_spec <- ten_day_min_outputs[[i]]$sum_all_yrs_dif %>%
mutate(species = species_list[[i]])
agg_sum_df <- bind_rows(agg_sum_df,next_spec)
}
# create plots
bp <- ggplot(agg_sum_df,aes(x=month,y=per_chg,fill=species))+
geom_bar(position = "dodge",stat="identity")+
theme(text=element_text(size=14,face = "bold",color = "black"),
panel.border = element_rect(fill = NA,size=1),
strip.background = element_rect(fill = NA),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y="% Change in Habitat Area",x="Month",title=species)+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
View(agg_sum_df)
# combine all of the sum_all_yrs_dif tables into 1
#agg_sum_df <- ten_day_min_outputs[[species]]$sum_all_yrs_dif
agg_sum_df <- data.frame()
for(i in 1:length(species_list)){
next_spec <- ten_day_min_outputs[[i]]$sum_all_yrs_dif %>%
mutate(species = species_list[[i]])
agg_sum_df <- bind_rows(agg_sum_df,next_spec)
}
agg_sum_df <- agg_sum_df %>%
filter(scene == "scenario3")
# create plots
bp <- ggplot(agg_sum_df,aes(x=month,y=per_chg,fill=species))+
geom_bar(position = "dodge",stat="identity")+
theme(text=element_text(size=14,face = "bold",color = "black"),
panel.border = element_rect(fill = NA,size=1),
strip.background = element_rect(fill = NA),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y="% Change in Habitat Area",x="Month",title=species)+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
bp
ggsave(paste("scenario3","_","per_chg.png",sep=""),width=7, height=5,units = "in")
# combine all of the sum_all_yrs_dif tables into 1
#agg_sum_df <- ten_day_min_outputs[[species]]$sum_all_yrs_dif
agg_sum_df <- data.frame()
for(i in 1:length(species_list)){
next_spec <- ten_day_min_outputs[[i]]$sum_all_yrs_dif %>%
mutate(species = species_list[[i]])
agg_sum_df <- bind_rows(agg_sum_df,next_spec)
}
agg_sum_df <- agg_sum_df %>%
filter(scene == "scenario2")
# create plots
bp <- ggplot(agg_sum_df,aes(x=month,y=per_chg,fill=species))+
geom_bar(position = "dodge",stat="identity")+
theme(text=element_text(size=14,face = "bold",color = "black"),
panel.border = element_rect(fill = NA,size=1),
strip.background = element_rect(fill = NA),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y="% Change in Habitat Area",x="Month",title=species)+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
ggsave(paste("scenario2","_","per_chg.png",sep=""),width=7, height=5,units = "in")
# combine all of the sum_all_yrs_dif tables into 1
#agg_sum_df <- ten_day_min_outputs[[species]]$sum_all_yrs_dif
agg_sum_df <- data.frame()
for(i in 1:length(species_list)){
next_spec <- ten_day_min_outputs[[i]]$sum_all_yrs_dif %>%
mutate(species = species_list[[i]])
agg_sum_df <- bind_rows(agg_sum_df,next_spec)
}
agg_sum_df <- agg_sum_df %>%
filter(scene == "scenario1")
# create plots
bp <- ggplot(agg_sum_df,aes(x=month,y=per_chg,fill=species))+
geom_bar(position = "dodge",stat="identity")+
theme(text=element_text(size=14,face = "bold",color = "black"),
panel.border = element_rect(fill = NA,size=1),
strip.background = element_rect(fill = NA),
axis.text.x = element_text(colour = "black",face="plain"),
axis.text.y = element_text(colour = "black",face="plain"))+
labs(y="% Change in Habitat Area",x="Month",title=species)+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
ggsave(paste("scenario1","_","per_chg.png",sep=""),width=7, height=5,units = "in")
median(hydrograph$discharge)
mean(hydrograph$discharge)
View(hydrograph)
### Using external flow scenario
# Yes or No. Yes - limit analysis to supplied dates. No - consider entire hydrograph.
DateRange <- "No"; if(DateRange=="Yes"){
start_date <- "2008-01-01" # "YYYY-MM-DD"
end_date <- "2018-12-31"} # "YYYY-MM-DD"
hydrograph <- na.omit(fread(paste(reach_wd,"flow_scenarios","/",reach_name,"_hydrograph",".csv",sep=""),
header=TRUE, sep = ",",data.table=FALSE))
hydrograph$date <- as.Date(hydrograph$date, format="%m/%d/%Y")
if(DateRange=="Yes"){
hydrograph <- subset(hydrograph, date > as.Date(start_date))
hydrograph <- subset(hydrograph, date < as.Date(end_date))
}
# to convert from CFS to CMS
hydrograph <- hydrograph %>%
mutate(discharge.cms = discharge*0.02832) %>%
select(-discharge) %>%
rename(discharge = discharge.cms)
med_months <- hydrograph %>%
dplyr::group_by(month(date)) %>%
dplyr::summarise(med = median(discharge))
View(med_months)
med_months[1]
med_months[[1]]
med_months[1,1]
med_months[1,2]
month(hydrograph$date)
?mutate_id
?mutate_if
altered_hydro <- data.frame()
for(m in 1:12){
med_q <- med_months[m,2]
hydro <- filter(hydrograph,month(date)=m) %>%
dplyr::mutate_if(discharge > med_q,red_q = discharge*0.75)
bind_rows(hydro,altered_hydro)
}
altered_hydro <- data.frame()
for(m in 1:12){
med_q <- med_months[m,2]
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate_if(discharge > med_q,red_q = discharge*0.75)
bind_rows(hydro,altered_hydro)
}
altered_hydro <- data.frame()
for(m in 1:12){
med_q <- med_months[m,2]
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate_if(hydrograph, discharge > med_q,red_q = discharge*0.75)
bind_rows(hydro,altered_hydro)
}
med_q <- as.numeric(med_months[m,2])
altered_hydro <- data.frame()
for(m in 1:12){
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate_if(hydrograph, discharge > med_q,red_q = discharge*0.75)
bind_rows(hydro,altered_hydro)
}
altered_hydro <- data.frame()
for(m in 1:12){
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate_if(discharge > med_q,red_q = discharge*0.75)
bind_rows(hydro,altered_hydro)
}
altered_hydro <- data.frame()
for(m in 1:12){
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) #%>%
#dplyr::mutate_if(discharge > med_q,red_q = discharge*0.75)
bind_rows(hydro,altered_hydro)
}
?ifelse
altered_hydro <- data.frame()
for(m in 1:12){
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate_if(hydrograph$discharge > med_q,red_q = discharge*0.75)
bind_rows(hydro,altered_hydro)
}
View(hydro)
m <- 1
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m)
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate_if(discharge > med_q,red_q = discharge*0.75)
altered_hydro <- data.frame()
for(m in 1:12){
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate(red_q = ifelse(discharge > med_q,discharge*0.75,discharge))
bind_rows(hydro,altered_hydro)
}
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate(red_q = ifelse(discharge > med_q,discharge*0.75,discharge))
View(hydro)
rm(m)
altered_hydro <- data.frame()
for(m in 1:12){
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate(red_q = ifelse(discharge > med_q,discharge*0.75,discharge))
bind_rows(hydro,altered_hydro)
}
for(m in 1:12){
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate(red_q = ifelse(discharge > med_q,discharge*0.75,discharge))
dplyr::bind_rows(altered_hydro,hydro)
}
for(m in 1:12){
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate(red_q = ifelse(discharge > med_q,discharge*0.75,discharge))
altered_hydro <- dplyr::bind_rows(altered_hydro,hydro)
}
View(altered_hydro)
red_above_med_25 <- data.frame()
for(m in 1:12){
med_q <- as.numeric(med_months[m,2])
hydro <- filter(hydrograph,month(date)==m) %>%
dplyr::mutate(red_q = ifelse(discharge > med_q,discharge*0.75,discharge))
red_above_med_25 <- dplyr::bind_rows(red_above_med_25,hydro)
}
red_above_med_25 <- select(red_above_med_25,-discharge) %>%
dplyr::rename(discharge = red_q)
write.csv(red_above_med_25,file="red_above_med_25_ts.csv")
# Yes or No. Yes - limit analysis to supplied dates. No - consider entire hydrograph.
DateRange <- "No"; if(DateRange=="Yes"){
start_date <- "2008-01-01" # "YYYY-MM-DD"
end_date <- "2018-12-31"} # "YYYY-MM-DD"
# Calculate exceedence probability for flows in scenario
flow_scene_ep <- data.frame(discharge = hydrograph["discharge"],q_rank=rank(-hydrograph["discharge"],ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(flow_scene_ep$discharge))
flow_scene_ep$EP <- flow_scene_ep$q_rank/(1+n)
df_m_q <- data.frame(discharge=modeled_q) %>%
filter(discharge < max(hydrograph$discharge)) # modeled discharges within range of flow scenario
View(flow_scene_ep)
hydro_ep <- bind_rows(flow_scene_ep,data.frame(anti_join(df_m_q["discharge"],flow_scene_ep["discharge"]))) %>%
arrange(discharge)
View(hydro_ep)
hydrograph <- na.omit(fread(paste(reach_wd,"flow_scenarios","/",reach_name,"_hydrograph",".csv",sep=""),
header=TRUE, sep = ",",data.table=FALSE))
hydrograph$date <- as.Date(hydrograph$date, format="%m/%d/%Y")
if(DateRange=="Yes"){
hydrograph <- subset(hydrograph, date > as.Date(start_date))
hydrograph <- subset(hydrograph, date < as.Date(end_date))
}
# to convert from CFS to CMS
hydrograph <- hydrograph %>%
mutate(discharge.cms = discharge*0.02832) %>%
select(-discharge) %>%
rename(discharge = discharge.cms)
# Yes or No. Choose whether to save flow scenario
SaveScene <- "Yes"
if(SaveScene == "Yes"){
scene_name <- "red_all_q_10"
}
hydroperiods <- c("03-19","06-01","09-01","12-01") # the start dates (mm-dd) of each hydroperiod
hp_names <- c("spring","summer","fall","winter")
## Add inputs in the following order: hydroperiod name, enforce median (y/n),
# median discharge for season (put NA if not enforcing median),
# fixed change (withdrawal or return flow), percent change in flow as a decimal (+/-)
inputs_hp <- list(
spring <- list("spring","No",NA,0,-.1),
summer <- list("summer","No",NA,0,-.1),
fall <- list("fall","No",NA,0,-.1),
winter <- list("winter","No",NA,0,-.1)
)
# add hydroperiods to hydrograph
source("add_hydroperiods.R")
hydrograph_hp <- add_hydroperiods(hydroperiods,hp_names,hydrograph)
# applies alterations to historic flow record
source("alter.hydrograph.R")
scene_by_hp <- lapply(inputs_hp, function(h){
hp <- h[[1]]
EnforceMed <- h[[2]]
median_q <- h[[3]]
fixed_chg <- h[[4]]
per_chg <- h[[5]]
alter.hydrograph(hydrograph_hp,EnforceMed,median_q,fixed_chg,per_chg,hp)
})
names(scene_by_hp) <- hp_names
# create df of flow scenario
flow_scene <- bind_rows(scene_by_hp) %>%
arrange(date)
View(flow_scene)
flow_scene <- bind_rows(scene_by_hp) %>%
arrange(date) %>%
select(-hydroperiod)
# Save scenario info
if(SaveScene == "Yes"){
scene_info <- list(hydroperiods,hp_names,inputs_hp)
list.save(scene_info,file=paste(reach_wd,"flow_scenarios","/",scene_name,"_inputs",".rdata",sep="")) # inputs
write.csv(flow_scene,file=paste(reach_wd,"flow_scenarios","/",reach_name,"_",scene_name,".csv",sep=""),row.names = FALSE) # output
}
hydrograph <- na.omit(fread(paste(reach_wd,"flow_scenarios","/",reach_name,"_hydrograph",".csv",sep=""),
header=TRUE, sep = ",",data.table=FALSE))
hydrograph$date <- as.Date(hydrograph$date, format="%m/%d/%Y")
if(DateRange=="Yes"){
hydrograph <- subset(hydrograph, date > as.Date(start_date))
hydrograph <- subset(hydrograph, date < as.Date(end_date))
}
# to convert from CFS to CMS
hydrograph <- hydrograph %>%
mutate(discharge.cms = discharge*0.02832) %>%
select(-discharge) %>%
rename(discharge = discharge.cms)
write.csv(hydrograph,file="hold.csv")
write.csv(modeled_q,file="modeled_q_list.csv")
?plot
?cellStats
View(ten_day_min_outputs)
