q_ts <- na.omit(fread(file=paste(reach_wd,"flow_scenarios","/",reach_name,"_",s,".csv",sep=""),
header=TRUE, sep = ",",data.table=FALSE)) %>%
mutate(date_form = as.Date(date)) %>%
select(-date) %>%
rename(date = date_form)
if(DateRange=="Yes"){
q_ts <- subset(q_ts, date > as.Date(start_date))
q_ts <- subset(q_ts, date < as.Date(end_date))
}
return(q_ts)
})
names(scene_list) <- scene_names
names(species_list) <- fish_names_full
names(veg_list) <- veg_names_full
# Figures and tables for fish
post_fish_figs <- list()
post_fish_figs <- lapply(species_list, function(species){
# Load all scenario results for species
scene_fish_out <- list()
scene_fish_out <- lapply(scene_names, function(scene_name){
output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",species,".rdata",sep="")) # load post-fish outputs
eval(parse(text=paste("hold_fish_output=",output_name)))
return(hold_fish_output)
})
names(scene_fish_out) <- scene_names
source("plot.10day.ts.R")
ten_day_ts_plt <- lapply(lifestages, function(a) plot.10day.ts(a,species,scene_fish_out,scene_list,NormalizeByL,post_tag))
names(ten_day_ts_plt) <- lifestages
post_fish_figs$ten_day_ts_plt <- ten_day_ts_plt
source("build.10day.tables.R")
ten_day_min_outputs <- lapply(lifestages, function(a) build.10day.tables(a,species,scene_list,scene_fish_out,post_tag))
names(ten_day_min_outputs) <- lifestages
post_fish_figs$ten_day_min_outputs <- ten_day_min_outputs
source("make.barplots.chg.R")
chg_barplots <- lapply(lifestages, function(a) make.barplots.chg(a,species,ten_day_min_outputs,post_tag))
names(chg_barplots) <- lifestages
post_fish_figs$chg_barplots <- chg_barplots
return(post_fish_figs)
})
# Figures and tables for fish
post_fish_figs <- list()
post_fish_figs <- lapply(species_list, function(species){
# Load all scenario results for species
scene_fish_out <- list()
scene_fish_out <- lapply(scene_names, function(scene_name){
output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",species,".rdata",sep="")) # load post-fish outputs
eval(parse(text=paste("hold_fish_output=",output_name)))
return(hold_fish_output)
})
names(scene_fish_out) <- scene_names
source("plot.10day.ts.R")
ten_day_ts_plt <- lapply(lifestages, function(a) plot.10day.ts(a,species,scene_fish_out,scene_list,NormalizeByL,post_tag))
names(ten_day_ts_plt) <- lifestages
post_fish_figs$ten_day_ts_plt <- ten_day_ts_plt
source("build.10day.tables.R")
ten_day_min_outputs <- lapply(lifestages, function(a) build.10day.tables(a,species,scene_list,scene_fish_out,post_tag))
names(ten_day_min_outputs) <- lifestages
post_fish_figs$ten_day_min_outputs <- ten_day_min_outputs
source("make.barplots.chg.R")
chg_barplots <- lapply(lifestages, function(a) make.barplots.chg(a,species,ten_day_min_outputs,post_tag))
names(chg_barplots) <- lifestages
post_fish_figs$chg_barplots <- chg_barplots
return(post_fish_figs)
})
# Figures and tables for fish
post_fish_figs <- list()
post_fish_figs <- lapply(species_list, function(species){
# Load all scenario results for species
scene_fish_out <- list()
scene_fish_out <- lapply(scene_names, function(scene_name){
output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",species,".rdata",sep="")) # load post-fish outputs
eval(parse(text=paste("hold_fish_output=",output_name)))
return(hold_fish_output)
})
names(scene_fish_out) <- scene_names
source("plot.10day.ts.R")
ten_day_ts_plt <- lapply(lifestages, function(a) plot.10day.ts(a,species,scene_fish_out,scene_list,NormalizeByL,post_tag))
names(ten_day_ts_plt) <- lifestages
post_fish_figs$ten_day_ts_plt <- ten_day_ts_plt
source("build.10day.tables.R")
ten_day_min_outputs <- lapply(lifestages, function(a) build.10day.tables(a,species,scene_list,scene_fish_out,post_tag))
names(ten_day_min_outputs) <- lifestages
post_fish_figs$ten_day_min_outputs <- ten_day_min_outputs
source("make.barplots.chg.R")
chg_barplots <- lapply(lifestages, function(a) make.barplots.chg(a,species,ten_day_min_outputs,post_tag))
names(chg_barplots) <- lifestages
post_fish_figs$chg_barplots <- chg_barplots
return(post_fish_figs)
})
# User inputs
post_tag <- "hd" # unique code to identify current run of DSS
# Figures and tables for fish
post_fish_figs <- list()
post_fish_figs <- lapply(species_list, function(species){
# Load all scenario results for species
scene_fish_out <- list()
scene_fish_out <- lapply(scene_names, function(scene_name){
output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",species,".rdata",sep="")) # load post-fish outputs
eval(parse(text=paste("hold_fish_output=",output_name)))
return(hold_fish_output)
})
names(scene_fish_out) <- scene_names
source("plot.10day.ts.R")
ten_day_ts_plt <- lapply(lifestages, function(a) plot.10day.ts(a,species,scene_fish_out,scene_list,NormalizeByL,post_tag))
names(ten_day_ts_plt) <- lifestages
post_fish_figs$ten_day_ts_plt <- ten_day_ts_plt
source("build.10day.tables.R")
ten_day_min_outputs <- lapply(lifestages, function(a) build.10day.tables(a,species,scene_list,scene_fish_out,post_tag))
names(ten_day_min_outputs) <- lifestages
post_fish_figs$ten_day_min_outputs <- ten_day_min_outputs
source("make.barplots.chg.R")
chg_barplots <- lapply(lifestages, function(a) make.barplots.chg(a,species,ten_day_min_outputs,post_tag))
names(chg_barplots) <- lifestages
post_fish_figs$chg_barplots <- chg_barplots
return(post_fish_figs)
})
names(post_fish_figs) <- species_list
# pull % change
fish_pc_builder <- lapply(species_list, function(species){
one_spec_list <- lapply(lifestages, function(a){ # pull % change tables for all lifestages from a single species
post_fish_figs[[species]]$ten_day_min_outputs[[a]]$sum_all_yrs_dif
})
names(one_spec_list) <- lifestages
one_spec_df <- bind_rows(one_spec_list,.id = "lifestage") # build single df per species
return(one_spec_df)
})
names(fish_pc_builder) <- species_list
# add criteria - nativeness
fish_pc_tab <- bind_rows(fish_pc_builder,.id = "species") %>%
filter(scene != "baseline_q") %>%
mutate(criteria = ifelse(species %in% native_list,"native","non-native"))
knitr::opts_chunk$set(echo = TRUE)
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis",
"ggplot2","gridExtra","data.table","dplyr","spex","stars","igraph","deldir","hydroTSM",
"lubridate","rlist","ggthemes","ggpubr")
#  Check to see if each is installed, and install if not.
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
# load the installed libraries in the packages list
lapply(packages,library,character.only=TRUE)
# User inputs
post_tag <- "hd" # unique code to identify current run of DSS
wd <- "C:/Users/epassero/Desktop/VRDSS/verde-refdss/" # Project working directory
#wd <- "/Users/Morrison/Documents/Active Research Projects/Verde REFDSS/verde-refdss/" # Set path to local repository
setwd(wd)
hab_mets <- list("Depth","Velocity") #Variables from iRIC calculation result used for habitat analysis - case sensitive
#species_list <- c("longfindace","desertsucker") #"sonoransucker") #"yellowbullhead", "sonoransucker","redshiner","roundtailchub","greensunfish","fatheadminnow","speckleddace")
species_list <- c("desertsucker","sonorasucker","roundtailchub","smallmouthbass","speckleddace","redshiner") # fish species list
native_list <- c("desertsucker","sonorasucker","roundtailchub") # list of native fish species in species_list
lifestages <- list("adult") #lifestages from oldest to youngest; must match order in HSC table
veg_list <- c("drgt_tol_shrubs","tall_trees","popufre","prosvel","saligoo") # vegetation group list
reach_name <- "USBeasley1" # Should match name of folder with results
model_run <- "2.12.20" # Should match end of name of folder with results
dis_unit <- "cms" #units of discharge
# Flow scenarios to include. This list should start with "baseline_q"
scene_names <- c("baseline_q","dis10","dis20","dis50")
# Yes or No. Choose whether or not to normalize habitat area by reach length
NormalizeByL <- "Yes"; if(NormalizeByL=="Yes"){
reach_length <- 0.5
length_unit <- "km"}
# Yes or No. Yes - limit analysis to supplied dates. No - consider entire hydrograph.
DateRange <- "No"; if(DateRange=="Yes"){
start_date <- "1974-01-01" # "YYYY-MM-DD"
end_date <- "1994-12-31"} # "YYYY-MM-DD"
#fish_names_full <- c("Desert Sucker","Smallmouth Bass")
#veg_names_full <- c("Drought Tolerant Shrubs", "Tall Trees")
#scene_names_full <- c("Baseline","25% Reduction","10% Reduction")
reach_run <- paste(reach_name,"_",model_run,sep="")
reach_wd <- paste(wd,"reaches","/",reach_run,"/",sep = "")
# create list of flow scenario data frames
scene_list <- lapply(scene_names, function(s){
q_ts <- na.omit(fread(file=paste(reach_wd,"flow_scenarios","/",reach_name,"_",s,".csv",sep=""),
header=TRUE, sep = ",",data.table=FALSE)) %>%
mutate(date_form = as.Date(date)) %>%
select(-date) %>%
rename(date = date_form)
if(DateRange=="Yes"){
q_ts <- subset(q_ts, date > as.Date(start_date))
q_ts <- subset(q_ts, date < as.Date(end_date))
}
return(q_ts)
})
names(scene_list) <- scene_names
names(species_list) <- fish_names_full
names(veg_list) <- veg_names_full
# Figures and tables for fish
post_fish_figs <- list()
post_fish_figs <- lapply(species_list, function(species){
# Load all scenario results for species
scene_fish_out <- list()
scene_fish_out <- lapply(scene_names, function(scene_name){
output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",species,".rdata",sep="")) # load post-fish outputs
eval(parse(text=paste("hold_fish_output=",output_name)))
return(hold_fish_output)
})
names(scene_fish_out) <- scene_names
source("plot.10day.ts.R")
ten_day_ts_plt <- lapply(lifestages, function(a) plot.10day.ts(a,species,scene_fish_out,scene_list,NormalizeByL,post_tag))
names(ten_day_ts_plt) <- lifestages
post_fish_figs$ten_day_ts_plt <- ten_day_ts_plt
source("build.10day.tables.R")
ten_day_min_outputs <- lapply(lifestages, function(a) build.10day.tables(a,species,scene_list,scene_fish_out,post_tag))
names(ten_day_min_outputs) <- lifestages
post_fish_figs$ten_day_min_outputs <- ten_day_min_outputs
source("make.barplots.chg.R")
chg_barplots <- lapply(lifestages, function(a) make.barplots.chg(a,species,ten_day_min_outputs,post_tag))
names(chg_barplots) <- lifestages
post_fish_figs$chg_barplots <- chg_barplots
return(post_fish_figs)
})
names(post_fish_figs) <- species_list
# pull % change
fish_pc_builder <- lapply(species_list, function(species){
one_spec_list <- lapply(lifestages, function(a){ # pull % change tables for all lifestages from a single species
post_fish_figs[[species]]$ten_day_min_outputs[[a]]$sum_all_yrs_dif
})
names(one_spec_list) <- lifestages
one_spec_df <- bind_rows(one_spec_list,.id = "lifestage") # build single df per species
return(one_spec_df)
})
names(fish_pc_builder) <- species_list
# add criteria - nativeness
fish_pc_tab <- bind_rows(fish_pc_builder,.id = "species") %>%
filter(scene != "baseline_q") %>%
mutate(criteria = ifelse(species %in% native_list,"native","non-native"))
# load barplots of % change
plot.bars <- function(one_fish_metrics,title){
one_fish_metrics$chg_barplots
}
map2(post_fish_figs,species_list,plot.bars)
# plots of % change by for single species (all lifestages) faceted by scenario
ggplot(data = fish_pc_tab, aes(x = month, y = per_chg, fill = species,alpha = lifestage))+
theme_few()+
scale_fill_brewer(palette = "Set1")+
geom_bar(stat = "identity",position = "dodge")+
theme(legend.position = "bottom")+
facet_wrap(vars(scene),dir = "v",labeller = as_labeller(scene_names_full))+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))+
{if(length(lifestages)>1) scale_alpha_discrete(range = c(1,0.35))}+
{if(length(lifestages)==1) scale_alpha_discrete(guide="none")}+
ylab("percent change")
# plots of % change by for single species (all lifestages) faceted by scenario
ggplot(data = fish_pc_tab, aes(x = month, y = per_chg, fill = species,alpha = lifestage))+
theme_few()+
scale_fill_brewer(palette = "Set1")+
geom_bar(stat = "identity",position = "dodge")+
theme(legend.position = "bottom")+
facet_wrap(vars(scene),dir = "v",labeller = as_labeller(scene_names_full))+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))+
{if(length(lifestages)>1) scale_alpha_discrete(range = c(1,0.35))}+
{if(length(lifestages)==1) scale_alpha_discrete(guide="none")}+
ylab("percent change")
# plots of % change by for single species (all lifestages) faceted by scenario
ggplot(data = fish_pc_tab, aes(x = month, y = per_chg, fill = species,alpha = lifestage))+
theme_few()+
scale_fill_brewer(palette = "Set1")+
geom_bar(stat = "identity",position = "dodge")+
theme(legend.position = "bottom")+
facet_wrap(vars(scene),dir = "v",labeller = as_labeller(scene))+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))+
{if(length(lifestages)>1) scale_alpha_discrete(range = c(1,0.35))}+
{if(length(lifestages)==1) scale_alpha_discrete(guide="none")}+
ylab("percent change")
# plots of % change by for single species (all lifestages) faceted by scenario
ggplot(data = fish_pc_tab, aes(x = month, y = per_chg, fill = species,alpha = lifestage))+
theme_few()+
scale_fill_brewer(palette = "Set1")+
geom_bar(stat = "identity",position = "dodge")+
theme(legend.position = "bottom")+
facet_wrap(vars(scene),dir = "v",labeller = as_labeller(scene_names))+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))+
{if(length(lifestages)>1) scale_alpha_discrete(range = c(1,0.35))}+
{if(length(lifestages)==1) scale_alpha_discrete(guide="none")}+
ylab("percent change")
View(fish_pc_tab)
# plots of % change by for single species (all lifestages) faceted by scenario
ggplot(data = fish_pc_tab, aes(x = month, y = per_chg, fill = species,alpha = lifestage))+
theme_few()+
scale_fill_brewer(palette = "Set1")+
geom_bar(stat = "identity",position = "dodge")+
theme(legend.position = "bottom")+
facet_wrap(vars(scene),dir = "v",labeller = scene)+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))+
{if(length(lifestages)>1) scale_alpha_discrete(range = c(1,0.35))}+
{if(length(lifestages)==1) scale_alpha_discrete(guide="none")}+
ylab("Percent Change")
# plots of % change by for single species (all lifestages) faceted by scenario
ggplot(data = fish_pc_tab, aes(x = month, y = per_chg, fill = species,alpha = lifestage))+
theme_few()+
scale_fill_brewer(palette = "Set1")+
geom_bar(stat = "identity",position = "dodge")+
theme(legend.position = "bottom")+
facet_wrap(vars(scene),dir = "v")+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))+
{if(length(lifestages)>1) scale_alpha_discrete(range = c(1,0.35))}+
{if(length(lifestages)==1) scale_alpha_discrete(guide="none")}+
ylab("Percent Change")
?scale_alpha_discrete
# plots of % change by for single species (all lifestages) faceted by scenario
ggplot(data = fish_pc_tab, aes(x = month, y = per_chg, fill = species,alpha = lifestage))+
theme_few()+
scale_fill_brewer(palette = "Set1")+
geom_bar(stat = "identity",position = "dodge")+
theme(legend.position = "bottom")+
facet_wrap(vars(scene),dir = "v")+
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))+
{if(length(lifestages)>1) scale_alpha_discrete(range = c(1,0.35))}+
{if(length(lifestages)==1) scale_alpha_discrete(guide="none",range = c(1,1))}+
ylab("Percent Change")
# load inundating discharge map
wet_map <- raster(paste(reach_wd,"dss_outputs/",reach_run,"_baseline_q_wet_map.tif",sep=""))
sum_veg_metrics <- list()
sum_veg_metrics <- lapply(veg_list, function(v) {
scene_veg_out <- lapply(scene_names, function(scene_name){
output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",v,".RData",sep=""))
eval(parse(text=paste("hold_veg_output=",output_name)))
return(hold_veg_output)
})
names(scene_veg_out) <- scene_names
# identify areas of high probability of occurrence
source("id.high.prob.areas.R")
high_prob_areas <- lapply(scene_names, function(scene_name) id.high.prob.areas(scene_veg_out,scene_name))
names(high_prob_areas) <- scene_names
sum_veg_metrics$high_prob_areas <- high_prob_areas
# maps of change in high probability of occurrence areas
source("map.chg.veg.areas.R")
chg_high_prob_areas <- lapply(scene_names, function(scene_name) map.chg.veg.areas(high_prob_areas,scene_name))
names(chg_high_prob_areas) <- scene_names
sum_veg_metrics$chg_high_prob_areas <- chg_high_prob_areas
# Tabulate area of high probability of occurrence
source("make.hp.area.tables.R")
hp_area_tab <- make.hp.area.tables(v,high_prob_areas,scene_names,NormalizeByL,reach_length)
sum_veg_metrics$hp_area_tab <- hp_area_tab
# Calculate % change in high probability of occurrence areas
source("calc.chg.veg.area.R")
per_chg_hp_tab <- calc.chg.veg.area(hp_area_tab,scene_names,NormalizeByL)
sum_veg_metrics$per_chg_hp_tab <- per_chg_hp_tab
# describe movement of high probability of occurrence areas
source("check.veg.movement.R")
veg_movement <- lapply(scene_names, function(scene_name) check.veg.movement(wet_map,high_prob_areas,scene_name))
names(veg_movement) <- scene_names
sum_veg_metrics$veg_movement <- veg_movement
return(sum_veg_metrics)
})
names(sum_veg_metrics) <- veg_list
# This script will house the post-processing options and functionality
# Last edited by Elaina Passero on 02/26/20
# Load required packages
packages <- c("SDMTools","sp","raster","rgeos","rgdal","sf","spatstat","spdep","tidyverse","rasterVis",
"ggplot2","data.table","dplyr","spex","stars","igraph","deldir","hydroTSM",
"lubridate","rlist")
#  Check to see if each is installed, and install if not.
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
# load the installed libraries in the packages list
lapply(packages,library,character.only=TRUE)
###########################################
# User inputs
wd <- "C:/Users/epassero/Desktop/VRDSS/verde-refdss/" # Project working directory
#wd <- "/Users/Morrison/Documents/Active Research Projects/Verde REFDSS/verde-refdss/" # Set path to local repository
setwd(wd)
hab_mets <- list("Depth","Velocity") #Variables from iRIC calculation result used for habitat analysis - case sensitive
#species_list <- c("longfindace","desertsucker") #"sonoransucker") #"yellowbullhead", "sonoransucker","redshiner","roundtailchub","greensunfish","fatheadminnow","speckleddace")
species_list <- c("desertsucker","sonorasucker","roundtailchub","smallmouthbass","speckleddace","redshiner") # fish species list
lifestages <- list("adult") #lifestages from oldest to youngest; must match order in HSC table
veg_list <- c("drgt_tol_shrubs","tall_trees","popufre","prosvel","saligoo") # vegetation group list
reach_name <- "USBeasley1" # Should match name of folder with results
model_run <- "2.12.20" # Should match end of name of folder with results
dis_unit <- "cms" #units of discharge
# Yes or No. Indicate whether or not to substrate was a condition of suitable habitat
CheckSub <- "Yes"
# Yes or No. Choose whether or not to normalize habitat area by reach length
NormalizeByL <- "Yes"; if(NormalizeByL=="Yes"){
reach_length <- 0.5
length_unit <- "km"}
# Yes or No. Choose whether or not to calculate X-day statistics. Must supply number of days.
CalcXDayStats <- "No"; if(CalcXDayStats=="Yes"){
x_days <- 7} # number of days for moving area statistics
# Yes or No. Yes - limit analysis to supplied dates. No - consider entire hydrograph.
DateRange <- "No"; if(DateRange=="Yes"){
start_date <- "1974-01-01" # "YYYY-MM-DD"
end_date <- "1994-12-31"} # "YYYY-MM-DD"
# Flow scenarios to calculate metrics for
scene_names <- c("baseline_q","red_25_percent","red_all_q_10")
### End of User Inputs ###
### Begin post-processing ###
reach_run <- paste(reach_name,"_",model_run,sep="")
reach_wd <- paste(wd,"reaches","/",reach_run,"/",sep = "")
# create list of flow scenario data frames
scene_list <- lapply(scene_names, function(s){
q_ts <- na.omit(fread(file=paste(reach_wd,"flow_scenarios","/",reach_name,"_",s,".csv",sep=""),
header=TRUE, sep = ",",data.table=FALSE)) %>%
mutate(date_form = as.Date(date)) %>%
select(-date) %>%
rename(date = date_form)
if(DateRange=="Yes"){
q_ts <- subset(q_ts, date > as.Date(start_date))
q_ts <- subset(q_ts, date < as.Date(end_date))
}
return(q_ts)
})
names(scene_list) <- scene_names
# Load pre.processing outputs
output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_pre_outputs.rdata",sep="")) # load rasterized 2D modeling results
eval(parse(text=paste("pre_outputs=",output_name)))
out_val_rast <- pre_outputs$out_val_rast
modeled_q <- pre_outputs$modeled_q
# Fish post-processing
all_fish_post_out <- list()
all_fish_post_out <- lapply(scene_names, function(scene_name){
s <- scene_list[[scene_name]]
post_fish_outputs <- list()
post_fish_outputs <- lapply(species_list, function(species){
output_name <- load(file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",species,"_fish_outputs.rdata",sep="")) # load fish outputs
eval(parse(text=paste("one_spec=",output_name)))
for(i in 1:length(one_spec)){ # extracts the outputs by species into their own object
tempobj = one_spec[[i]]
eval(parse(text=paste(names(one_spec)[[i]],"=tempobj")))
}
# Flow-Scenario related scripts
source("interp.table.R")
inter_tab <- lapply(lifestages, function(a) interp.table(a,s,area_look_tab,NormalizeByL))
names(inter_tab) <- lifestages
post_fish_outputs$inter_tab <- inter_tab
# Generate and view plots of total area through the hydrograph
source("interp.plot.R")
inter_plots <- interp.plot(inter_tab,NormalizeByL,species,scene_name,reach_run)
names(inter_plots) <- species
post_fish_outputs$inter_plots <- inter_plots
## Generate Data Frames of moving X-Day area and discharge statistics
if(CalcXDayStats=="Yes"){
source("x.day.stats.R")
x_day_stats <- lapply(lifestages, function(a) x.day.stats(a,inter_tab,x_days,NormalizeByL,reach_length))
names(x_day_stats) <- lifestages
post_fish_outputs$x_day_stats <- x_day_stats
}
source("avg.month.area.R")
avg_monthly_area <- lapply(lifestages, function(a) avg.month.area(a,inter_tab,NormalizeByL))
names(avg_monthly_area) <- lifestages
post_fish_outputs$avg_monthly_area <- avg_monthly_area
# end of flow scenario dependent processes
# save outputs (dss_outputs) for use in scenario.comparison.R
list.save(post_fish_outputs,file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",species,".rdata",sep=""))
return(post_fish_outputs)
}) # end of single species function
names(post_fish_outputs) <- species_list
return(post_fish_outputs)
}) # end of flow scenario list function
names(all_fish_post_out) <- names(scene_list)
# Producing Figures for Chris + Dave
# source("calc.hab.retention.R")
# hab_retention <- lapply(scene_fish_out, habitat.retention())
# source("interp.plot.abbr.R")
# scenario <- "baseline"
#
# # annual
# inter_plots_ann <- lapply(species_list, function(species) {
#   inter_tab <- scene_fish_out[[scenario]][[species]]$inter_tab
#   write.csv(inter_tab,file = paste(scenario,"_",species,"_tab.csv",sep=""))
#   interp.plot.abbr(inter_tab,NormalizeByL,as.Date("1990-01-01"),as.Date("1990-12-31"),scenario,species)
#   ggsave(paste(scenario,"_",species,"_","annual.png",sep=""),width=7, height=5,units = "in")
#   })
# names(inter_plots_ann) <- species_list
# inter_plots_ann
#
# # monthly
# inter_plots_mon <- lapply(species_list, function(species) {
#   inter_tab <- scene_fish_out[[scenario]][[species]]$inter_tab
#   interp.plot.abbr(inter_tab,NormalizeByL,as.Date("1990-07-01"),as.Date("1990-08-31"),scenario,species)
#   ggsave(paste(scenario,"_",species,"_","monthly.png",sep=""),width=7, height=5,units = "in")
# })
# names(inter_plots_mon) <- species_list
# inter_plots_mon
# Riparian vegetation post-processing
all_veg_post_out <- list()
all_veg_post_out <- lapply(scene_names, function(scene_name){
s <- scene_list[[scene_name]]
source("q.ep.weibull.R")
hydro_ep <- q.ep.weibull(s,modeled_q,scene_name)
all_veg_post_out$hydro_ep <- hydro_ep
source("make.inun.q.map.R")
wet_map <- make.inun.q.map(hydro_ep,out_val_rast,modeled_q,scene_name,reach_run)
all_veg_post_out$wet_map <- wet_map
source("make.ep.maps.R")
ep_map <- make.ep.maps(hydro_ep,out_val_rast,modeled_q,scene_name)
all_veg_post_out$ep_map <- ep_map
# make maps of probability of occurrence of vegetation
all_veg_logit <- fread(paste(reach_wd,"habitat_info","/",reach_name,"_veg_pref",".csv",sep=""),
header=TRUE, sep = ",",data.table = FALSE) # load logistic equations
source("find.veg.logit.R"); source("find.prob.occur.R"); source("make.veg.maps.R")
prob_veg_maps <- lapply(veg_list, function(v) {
one_veg_logit <- find.veg.logit(all_veg_logit,v)
hydro_ep_prob <- find.prob.occur(v,hydro_ep,one_veg_logit) # outputs table of discharge, EP of discharge, and Prob of Veg for discharge
prob_veg_map <- make.veg.maps(v,ep_map,hydro_ep_prob,scene_name)
save(prob_veg_map, file=paste(reach_wd,"dss_outputs/","internal/",reach_run,"_",scene_name,"_post_",v,".RData",sep=""))
return(prob_veg_map)
})
names(prob_veg_maps) <- veg_list
all_veg_post_out$prob_veg_maps <- prob_veg_maps
return(all_veg_post_out)
}) # end of flow scenario list function
names(all_veg_post_out) <- names(scene_list)
