name <- gsub(names(brick_by_q,"X",""))
?gsub
sort_q <- gsub("X","",names(brick_by_q))
sort_q <- as.numeric(gsub("X","",names(brick_by_q)))
brick_by_q <- brick(order.by.q(1,out_val_rast,modeled_q))
sort_q <- as.numeric(gsub("X","",names(brick_by_q)))
rclmat <- matrix(c(0,Inf,1, -Inf,0,NA),ncol=3,byrow=TRUE)
wet_brick <- reclassify(brick_by_q,rclmat)
for(j in 1:nlayers(wet_brick)){
wet_brick[[j]] <- wet_brick[[j]]*sort_q[j] # apply discharge value to inundated areas
}
# use cover() function to make layer of inundating discharge
wet_map <- wet_brick[[1]]
for(j in 1:nlayers(wet_brick)){
wet_map <- cover(wet_map,wet_brick[[j]]) # inundating Q map
}
View(hydro_ep)
?mutate
from <- c(0,hydro_ep$discharge[-1])
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
add_column(from = c(0,discharge[-1])) %>%
rename(to = c(discharge,Inf), becomes = EP)
View(modeled_q_ep)
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge)
View(modeled_q_ep)
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_column(from = c(0,discharge[-1])) %>%
rename(to = c(discharge,Inf), becomes = c(1,EP))
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_column(from = c(0,modeled_q_ep$discharge[-1])) %>%
rename(to = c(modeled_q_ep$discharge,Inf), becomes = c(1,modeled_q_ep$EP))
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_column(from = c(0,modeled_q_ep$discharge[-1]))
View(modeled_q_ep)
from = c(0,modeled_q_ep$discharge[-length(modeled_q)])
from = c(0,modeled_q_ep$discharge[-length(modeled_q_ep)])
rm(from)
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_column(from = c(0,modeled_q_ep$discharge[-length(modeled_q_ep)]),.before = "discharge")
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
rename(to = c(modeled_q_ep$discharge,Inf), becomes = c(1,modeled_q_ep$EP)) %>%
add_column(from = c(0,modeled_q_ep$discharge[-length(modeled_q_ep)]),.before = "discharge")
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
mutate(to = c(modeled_q_ep$discharge,Inf), becomes = c(1,modeled_q_ep$EP)) %>%
add_column(from = c(0,modeled_q_ep$discharge[-length(modeled_q_ep)]),.before = "discharge")
View(modeled_q_ep)
?bind_rows
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
bind_rows(c(Inf,1))
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
bind_rows(.,c(Inf,1))
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
bind_rows(.,c(Inf,1))
?add_row
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_column(from = c(0,modeled_q_ep$discharge[-length(modeled_q_ep)]),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_column(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_row(discharge = NA, EP = NA) %>%
add_column(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
View(modeled_q_ep)
modeled_q
# Calculate exceedence probability for flows in scenario
hydro_ep <- data.frame(discharge = hydrograph$discharge,rank=rank(-hydrograph$discharge,ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(hydro_ep$discharge))
hydro_ep$EP <- hydro_ep$rank/(1+n)
df_m_q <- data.frame(discharge=modeled_q)
unique_q <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
unique(arrange(discharge)) %>%
approx(x=uniqueQ$discharge,y=uniqueQ$EP,method="linear",xout=uniqueQ$discharge)
unique_q <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"])))
View(unique_q)
unique_q <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
unique(arrange(discharge))
df_m_q <- data.frame(discharge=modeled_q)
unique_q <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
unique(dplyr::arrange(discharge)) %>%
approx(x=uniqueQ$discharge,y=uniqueQ$EP,method="linear",xout=uniqueQ$discharge)
hydro_ep$EP <- hydro_ep$rank/(1+n)
df_m_q <- data.frame(discharge=modeled_q)
unique_q <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
unique(dplyr::arrange(.,discharge))
?arrange
?sort
?arrange
df_m_q <- data.frame(discharge=modeled_q)
unique_q <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(x=unique_q$discharge,y=unique_q$EP,method="linear",xout=unique_q$discharge)
unique_q <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(x=discharge,y=EP,method="linear",xout=discharge)
?approx
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(hydro_ep$discharge,hydro_ep$EP,method="linear",hydro_ep$discharge)
approx(hydro_ep$discharge,hydro_ep$EP,method="linear",hydro_ep$discharge)
View(hydro_ep)
df_m_q <- data.frame(discharge=modeled_q)
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct()
approx(hydro_ep$discharge,hydro_ep$EP,method="linear",hydro_ep$discharge)
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(hydro_ep$discharge,hydro_ep$EP,method="linear",hydro_ep$discharge)
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(hydro_ep$discharge,hydro_ep$EP,method="linear",xout=hydro_ep$discharge)
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge, setLab = c("discharge","EP"))
df_m_q <- data.frame(discharge=modeled_q)
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge, setLab = c("discharge","EP"))
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)
df_m_q <- data.frame(discharge=modeled_q)
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)
rm(hydro_ep)
# Calculate exceedence probability for flows in scenario
hydro_ep <- data.frame(discharge = hydrograph$discharge,rank=rank(-hydrograph$discharge,ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(hydro_ep$discharge))
hydro_ep$EP <- hydro_ep$rank/(1+n)
df_m_q <- data.frame(discharge=modeled_q)
hydro_ep <- bind_rows(hydro_ep,data.frame(anti_join(df_m_q["discharge"],hydro_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)
View(hydro_ep)
flow_scene_ep$EP <- flow_scene_ep$rank/(1+n)
# Calculate exceedence probability for flows in scenario
flow_scene_ep <- data.frame(discharge = hydrograph$discharge,rank=rank(-hydrograph$discharge,ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(flow_scene_ep$discharge))
flow_scene_ep$EP <- flow_scene_ep$rank/(1+n)
# Calculate exceedence probability for flows in scenario
flow_scene_ep <- data.frame(discharge = hydrograph$discharge,rank=rank(-hydrograph$discharge,ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(flow_scene_ep$discharge))
flow_scene_ep$EP <- flow_scene_ep$rank/(1+n)
df_m_q <- data.frame(discharge=modeled_q)
hydro_ep <- bind_rows(flow_scene_ep,data.frame(anti_join(df_m_q["discharge"],flow_scene_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
approx(x=flow_scene_ep$discharge,y=flow_scene_ep$EP,method="linear",xout=flow_scene_ep$discharge)
View(hydro_ep)
df_m_q <- data.frame(discharge=modeled_q)
hydro_ep <- bind_rows(flow_scene_ep,data.frame(anti_join(df_m_q["discharge"],flow_scene_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
data.frame(approx(discharge=flow_scene_ep$discharge,EP=flow_scene_ep$EP,method="linear",xout=flow_scene_ep$discharge))
df_m_q <- data.frame(discharge=modeled_q)
hydro_ep <- bind_rows(flow_scene_ep,data.frame(anti_join(df_m_q["discharge"],flow_scene_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
data.frame(approx(x=flow_scene_ep$discharge,y=flow_scene_ep$EP,method="linear",xout=flow_scene_ep$discharge))
# Calculate exceedence probability for flows in scenario
flow_scene_ep <- data.frame(discharge = hydrograph$discharge,rank=rank(-hydrograph$discharge,ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(flow_scene_ep$discharge))
flow_scene_ep$EP <- flow_scene_ep$rank/(1+n)
df_m_q <- data.frame(discharge=modeled_q)
hydro_ep <- bind_rows(flow_scene_ep,data.frame(anti_join(df_m_q["discharge"],flow_scene_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct() %>%
data.frame(approx(x=flow_scene_ep$discharge,y=flow_scene_ep$EP,method="linear",xout=flow_scene_ep$discharge))
View(hydro_ep)
hydro_ep <- bind_rows(flow_scene_ep,data.frame(anti_join(df_m_q["discharge"],flow_scene_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct()
View(hydro_ep)
test_ep <- data.frame(approx(x=flow_scene_ep$discharge,y=flow_scene_ep$EP,method="linear",xout=flow_scene_ep$discharge)) %>%
dplyr::rename(discharge = x, EP = y)
View(test_ep)
test_ep <- data.frame(approx(x=flow_scene_ep$discharge,y=flow_scene_ep$EP,method="linear",xout=flow_scene_ep$discharge))
View(test_ep)
rm(test_ep)
test_ep <- data.frame(approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)) %>%
dplyr::rename(discharge = x, EP = y)
View(test_ep)
modeled_q
test_ep <- data.frame(approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)) %>%
dplyr::rename(discharge = x, EP = y)
if(min(test_ep$discharge) == 0){
test_ep[1,1] <- 1
}
test_ep <- data.frame(approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)) %>%
dplyr::rename(discharge = x, EP = y)
if(min(test_ep$discharge) == 0){
test_ep[1,2] <- 1
}
# Calculate exceedence probability for flows in scenario
flow_scene_ep <- data.frame(discharge = hydrograph$discharge,rank=rank(-hydrograph$discharge,ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(flow_scene_ep$discharge))
flow_scene_ep$EP <- flow_scene_ep$rank/(1+n)
df_m_q <- data.frame(discharge=modeled_q)
hydro_ep <- bind_rows(flow_scene_ep,data.frame(anti_join(df_m_q["discharge"],flow_scene_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct()
hydro_ep <- data.frame(approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)) %>%
dplyr::rename(discharge = x, EP = y)
if(min(hydro_ep$discharge) == 0){
hydro_ep[1,2] <- 1
} # sets EP for 0 to 1 if 0 was included in the analysis
max(hydrograph$discharge)
modeled_q
## testing only
hydrograph <- hydrograph %>%
filter(discharges < max(modeled_q))
## testing only
hydrograph <- hydrograph %>%
filter(discharge < max(modeled_q))
max(hydrograph$discharge)
df_m_q_larger <- data.frame(discharge=modeled_q) %>%
filter(discharge > max(hydrograph$discharge))
View(df_m_q_larger)
## testing only
hydrograph <- hydrograph %>%
filter(discharge < 2000)
max(hydrograph$discharge)
df_m_q_larger <- data.frame(discharge=modeled_q) %>%
filter(discharge > max(hydrograph$discharge))
View(df_m_q_larger)
# Calculalte EP for flows larger than flow scenario. Assuming 1 event per flow.
df_m_q_larger <- data.frame(discharge=modeled_q) %>%
filter(discharge > max(hydrograph$discharge)) # modeled discharges above range of flow scenario
mutate(rank = rank(-discharge,ties.method = "min")+n, EP = rank/(1+n+length(df_m_q_larger)))
mutate(rank = rank(-df_m_q_larger$discharge,ties.method = "min")+n, EP = rank/(1+n+length(df_m_q_larger)))
# Calculalte EP for flows larger than flow scenario. Assuming 1 event per flow.
df_m_q_larger <- data.frame(discharge=modeled_q) %>%
filter(discharge > max(hydrograph$discharge)) %>% # modeled discharges above range of flow scenario
mutate(rank = rank(-df_m_q_larger$discharge,ties.method = "min")+n,
muEP = rank/(1+n+length(df_m_q_larger)))
View(df_m_q_larger)
# Calculalte EP for flows larger than flow scenario. Assuming 1 event per flow.
df_m_q_larger <- data.frame(discharge=modeled_q) %>%
filter(discharge > max(hydrograph$discharge)) %>% # modeled discharges above range of flow scenario
mutate(rank = rank(-df_m_q_larger$discharge,ties.method = "min")+n,
EP = rank/(1+n+length(df_m_q_larger)))
# Calculate exceedence probability for flows in scenario
flow_scene_ep <- data.frame(discharge = hydrograph$discharge,rank=rank(-hydrograph$discharge,ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(flow_scene_ep$discharge))
flow_scene_ep$EP <- flow_scene_ep$rank/(1+n)
hydrograph <- hydrograph %>%
filter(discharge < 2000)
max(hydrograph$discharge)
n <- length(hydrograph)
n <- length(hydrograph$discharge)
n <- as.numeric(length(hydrograph$discharge))
# Calculalte EP for flows larger than flow scenario. Assuming 1 event per flow.
df_m_q_larger <- data.frame(discharge=modeled_q) %>%
filter(discharge > max(hydrograph$discharge)) %>% # modeled discharges above range of flow scenario
mutate(rank = rank(-df_m_q_larger$discharge,ties.method = "min")+n,
EP = rank/(1+n+length(df_m_q_larger)))
df_m_q_larger <- data.frame(discharge=modeled_q) %>%
filter(discharge > max(hydrograph$discharge)) %>% # modeled discharges above range of flow scenario
mutate(rank = rank(-df_m_q_larger$discharge,ties.method = "min"),
EP = rank/(1+n+length(df_m_q_larger)))
hydro_ep <- bind_rows(hydro_ep,df_m_q_larger) %>% # join extra flows and their EP values to flow scenario
select(-rank)
View(hydro_ep)
# Calculate exceedence probability for flows in scenario
flow_scene_ep <- data.frame(discharge = hydrograph$discharge,rank=rank(-hydrograph$discharge,ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(flow_scene_ep$discharge))
flow_scene_ep$EP <- flow_scene_ep$rank/(1+n)
df_m_q <- data.frame(discharge=modeled_q) %>%
filter(discharge < max(hydrograph$discharge)) # modeled discharges within range of flow scenario
hydro_ep <- bind_rows(flow_scene_ep,data.frame(anti_join(df_m_q["discharge"],flow_scene_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct()
hydro_ep <- data.frame(approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)) %>%
dplyr::rename(discharge = x, EP = y)
if(min(hydro_ep$discharge) == 0){
hydro_ep[1,2] <- 1
} # sets EP for 0 to 1 if 0 was included in the analysis
# Calculalte EP for flows larger than flow scenario. Assuming 1 event per flow.
df_m_q_larger <- data.frame(discharge=modeled_q) %>%
filter(discharge > max(hydrograph$discharge)) %>% # modeled discharges above range of flow scenario
mutate(rank = rank(-df_m_q_larger$discharge,ties.method = "min"),
EP = rank/(1+n+length(df_m_q_larger)))
hydro_ep <- bind_rows(hydro_ep,df_m_q_larger) %>% # join extra flows and their EP values to flow scenario
select(-rank)
View(hydro_ep)
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_row(discharge = NA, EP = NA) %>%
add_column(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_row(discharge = NA, EP = NA)
View(modeled_q_ep)
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_row(discharge = NA, EP = NA) %>%
add_column(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
add_column(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
rm(modeled_q_ep)
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_row(discharge = NA, EP = NA) %>%
add_column(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
rcl_ep <- modeled_q_ep %>%
add_column(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_row(discharge = NA, EP = NA)
rcl_ep <- modeled_q_ep %>%
add_column(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge)
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge) %>%
add_row(discharge = NA, EP = NA)
rcl_ep <-data.frame(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
View(rcl_ep)
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge)
rcl_ep <-data.frame(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
rcl_ep <-matrix(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP))
rcl_ep <- data.frame(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP)) %>%
as.matrix(.)
View(rcl_ep)
rcl_ep <- data.frame(from = c(0,modeled_q_ep$discharge),
to = c(modeled_q_ep$discharge,Inf),
becomes = c(1,modeled_q_ep$EP)) %>%
distinct() %>%
as.matrix(.)
rcl_ep <- data.frame(from = modeled_q_ep$discharge,
to = c(modeled_q_ep$discharge[-1],Inf),
becomes = modeled_q_ep$EP) %>%
distinct() %>%
as.matrix(.)
# reclassify raster
ep_map <- reclassify(wet_map, rcl_ep, right = TRUE)
spplot(ep_map)
# build matrix for reclassification
rcl_ep <- data.frame(from = modeled_q_ep$discharge,
to = c(modeled_q_ep$discharge[-1],Inf),
becomes = modeled_q_ep$EP) %>%
as.matrix(.)
# reclassify raster
ep_map <- reclassify(wet_map, rcl_ep, right = TRUE)
spplot(ep_map)
### Using external flow scenario
hydrograph <- na.omit(fread(paste(reach_wd,"flow_scenarios","/",reach_name,"_hydrograph",".csv",sep=""),
header=TRUE, sep = ",",data.table=FALSE))
hydrograph$date <- as.Date(hydrograph$date, format="%m/%d/%Y")
q.ep.weibull <- function(hydrograph){
# Calculate exceedence probability for flows in scenario
flow_scene_ep <- data.frame(discharge = hydrograph$discharge,rank=rank(-hydrograph$discharge,ties.method = "min")) # ranks discharges; same values get same ranks
n <- as.numeric(length(flow_scene_ep$discharge))
flow_scene_ep$EP <- flow_scene_ep$rank/(1+n)
df_m_q <- data.frame(discharge=modeled_q) %>%
filter(discharge < max(hydrograph$discharge)) # modeled discharges within range of flow scenario
hydro_ep <- bind_rows(flow_scene_ep,data.frame(anti_join(df_m_q["discharge"],flow_scene_ep["discharge"]))) %>%
arrange(discharge) %>%
distinct()
hydro_ep <- data.frame(approx(x=hydro_ep$discharge,y=hydro_ep$EP,method="linear",xout=hydro_ep$discharge)) %>%
dplyr::rename(discharge = x, EP = y)
if(min(hydro_ep$discharge) == 0){
hydro_ep[1,2] <- 1
} # sets EP for 0 to 1 if 0 was included in the analysis
# Calculalte EP for flows larger than flow scenario. Assuming 1 event per flow.
df_m_q_larger <- data.frame(discharge=modeled_q) %>%
filter(discharge > max(hydrograph$discharge)) %>% # modeled discharges above range of flow scenario
mutate(rank = rank(-df_m_q_larger$discharge,ties.method = "min"),
EP = rank/(1+n+length(df_m_q_larger)))
hydro_ep <- bind_rows(hydro_ep,df_m_q_larger) %>% # join extra flows and their EP values to flow scenario
select(-rank)
return(hydro_ep)
}
make.ep.maps <- function(hydro_ep,out_val_rast,modeled_q){
brick_by_q <- brick(order.by.q(1,out_val_rast,modeled_q))
sort_q <- as.numeric(gsub("X","",names(brick_by_q)))
rclmat <- matrix(c(0,Inf,1, -Inf,0,NA),ncol=3,byrow=TRUE)
wet_brick <- reclassify(brick_by_q,rclmat)
for(j in 1:nlayers(wet_brick)){
wet_brick[[j]] <- wet_brick[[j]]*sort_q[j] # apply discharge value to inundated areas
}
# use cover() function to make layer of inundating discharge
wet_map <- wet_brick[[1]]
for(j in 1:nlayers(wet_brick)){
wet_map <- cover(wet_map,wet_brick[[j]]) # inundating Q map
}
# get EP values for modeled discharges
modeled_q_ep <- hydro_ep %>%
filter(discharge %in% modeled_q) %>%
distinct() %>%
arrange(discharge)
# build matrix for reclassification
rcl_ep <- data.frame(from = modeled_q_ep$discharge,
to = c(modeled_q_ep$discharge[-1],Inf),
becomes = modeled_q_ep$EP) %>%
as.matrix(.)
# reclassify raster
ep_map <- reclassify(wet_map, rcl_ep, right = TRUE)
return(ep_map)
}
spplot(ep_map)
?writeRaster
sort_q[[1]]
sort_q[[10]]
